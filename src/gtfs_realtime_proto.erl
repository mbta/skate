%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.6.0
-module(gtfs_realtime_proto).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_FeedHeader.Incrementality'/1, 'enum_value_by_symbol_FeedHeader.Incrementality'/1]).
-export(['enum_symbol_by_value_TripUpdate.StopTimeUpdate.ScheduleRelationship'/1, 'enum_value_by_symbol_TripUpdate.StopTimeUpdate.ScheduleRelationship'/1]).
-export(['enum_symbol_by_value_VehiclePosition.VehicleStopStatus'/1, 'enum_value_by_symbol_VehiclePosition.VehicleStopStatus'/1]).
-export(['enum_symbol_by_value_VehiclePosition.CongestionLevel'/1, 'enum_value_by_symbol_VehiclePosition.CongestionLevel'/1]).
-export(['enum_symbol_by_value_VehiclePosition.OccupancyStatus'/1, 'enum_value_by_symbol_VehiclePosition.OccupancyStatus'/1]).
-export(['enum_symbol_by_value_Alert.Cause'/1, 'enum_value_by_symbol_Alert.Cause'/1]).
-export(['enum_symbol_by_value_Alert.Effect'/1, 'enum_value_by_symbol_Alert.Effect'/1]).
-export(['enum_symbol_by_value_TripDescriptor.ScheduleRelationship'/1, 'enum_value_by_symbol_TripDescriptor.ScheduleRelationship'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'FeedHeader.Incrementality'() :: 'FULL_DATASET' | 'DIFFERENTIAL'.
-type 'TripUpdate.StopTimeUpdate.ScheduleRelationship'() :: 'SCHEDULED' | 'SKIPPED' | 'NO_DATA'.
-type 'VehiclePosition.VehicleStopStatus'() :: 'INCOMING_AT' | 'STOPPED_AT' | 'IN_TRANSIT_TO'.
-type 'VehiclePosition.CongestionLevel'() :: 'UNKNOWN_CONGESTION_LEVEL' | 'RUNNING_SMOOTHLY' | 'STOP_AND_GO' | 'CONGESTION' | 'SEVERE_CONGESTION'.
-type 'VehiclePosition.OccupancyStatus'() :: 'EMPTY' | 'MANY_SEATS_AVAILABLE' | 'FEW_SEATS_AVAILABLE' | 'STANDING_ROOM_ONLY' | 'CRUSHED_STANDING_ROOM_ONLY' | 'FULL' | 'NOT_ACCEPTING_PASSENGERS'.
-type 'Alert.Cause'() :: 'UNKNOWN_CAUSE' | 'OTHER_CAUSE' | 'TECHNICAL_PROBLEM' | 'STRIKE' | 'DEMONSTRATION' | 'ACCIDENT' | 'HOLIDAY' | 'WEATHER' | 'MAINTENANCE' | 'CONSTRUCTION' | 'POLICE_ACTIVITY' | 'MEDICAL_EMERGENCY'.
-type 'Alert.Effect'() :: 'NO_SERVICE' | 'REDUCED_SERVICE' | 'SIGNIFICANT_DELAYS' | 'DETOUR' | 'ADDITIONAL_SERVICE' | 'MODIFIED_SERVICE' | 'OTHER_EFFECT' | 'UNKNOWN_EFFECT' | 'STOP_MOVED'.
-type 'TripDescriptor.ScheduleRelationship'() :: 'SCHEDULED' | 'ADDED' | 'UNSCHEDULED' | 'CANCELED'.
-export_type(['FeedHeader.Incrementality'/0, 'TripUpdate.StopTimeUpdate.ScheduleRelationship'/0, 'VehiclePosition.VehicleStopStatus'/0, 'VehiclePosition.CongestionLevel'/0, 'VehiclePosition.OccupancyStatus'/0, 'Alert.Cause'/0, 'Alert.Effect'/0, 'TripDescriptor.ScheduleRelationship'/0]).

%% message types
-type 'FeedMessage'() ::
      #{header                  := 'FeedHeader'(),  % = 1
        entity                  => ['FeedEntity'()] % = 2
       }.

-type 'FeedHeader'() ::
      #{gtfs_realtime_version   := iodata(),        % = 1
        incrementality          => 'FULL_DATASET' | 'DIFFERENTIAL' | integer(), % = 2, enum FeedHeader.Incrementality
        timestamp               => non_neg_integer() % = 3, 32 bits
       }.

-type 'FeedEntity'() ::
      #{id                      := iodata(),        % = 1
        is_deleted              => boolean() | 0 | 1, % = 2
        trip_update             => 'TripUpdate'(),  % = 3
        vehicle                 => 'VehiclePosition'(), % = 4
        alert                   => 'Alert'()        % = 5
       }.

-type 'TripUpdate.StopTimeEvent'() ::
      #{delay                   => integer(),       % = 1, 32 bits
        time                    => integer(),       % = 2, 32 bits
        uncertainty             => integer()        % = 3, 32 bits
       }.

-type 'TripUpdate.StopTimeUpdate'() ::
      #{stop_sequence           => non_neg_integer(), % = 1, 32 bits
        stop_id                 => iodata(),        % = 4
        arrival                 => 'TripUpdate.StopTimeEvent'(), % = 2
        departure               => 'TripUpdate.StopTimeEvent'(), % = 3
        schedule_relationship   => 'SCHEDULED' | 'SKIPPED' | 'NO_DATA' | integer() % = 5, enum TripUpdate.StopTimeUpdate.ScheduleRelationship
       }.

-type 'TripUpdate'() ::
      #{trip                    := 'TripDescriptor'(), % = 1
        vehicle                 => 'VehicleDescriptor'(), % = 3
        stop_time_update        => ['TripUpdate.StopTimeUpdate'()], % = 2
        timestamp               => non_neg_integer(), % = 4, 32 bits
        delay                   => integer()        % = 5, 32 bits
       }.

-type 'VehiclePosition'() ::
      #{trip                    => 'TripDescriptor'(), % = 1
        vehicle                 => 'VehicleDescriptor'(), % = 8
        position                => 'Position'(),    % = 2
        current_stop_sequence   => non_neg_integer(), % = 3, 32 bits
        stop_id                 => iodata(),        % = 7
        current_status          => 'INCOMING_AT' | 'STOPPED_AT' | 'IN_TRANSIT_TO' | integer(), % = 4, enum VehiclePosition.VehicleStopStatus
        timestamp               => non_neg_integer(), % = 5, 32 bits
        congestion_level        => 'UNKNOWN_CONGESTION_LEVEL' | 'RUNNING_SMOOTHLY' | 'STOP_AND_GO' | 'CONGESTION' | 'SEVERE_CONGESTION' | integer(), % = 6, enum VehiclePosition.CongestionLevel
        occupancy_status        => 'EMPTY' | 'MANY_SEATS_AVAILABLE' | 'FEW_SEATS_AVAILABLE' | 'STANDING_ROOM_ONLY' | 'CRUSHED_STANDING_ROOM_ONLY' | 'FULL' | 'NOT_ACCEPTING_PASSENGERS' | integer() % = 9, enum VehiclePosition.OccupancyStatus
       }.

-type 'Alert'() ::
      #{active_period           => ['TimeRange'()], % = 1
        informed_entity         => ['EntitySelector'()], % = 5
        cause                   => 'UNKNOWN_CAUSE' | 'OTHER_CAUSE' | 'TECHNICAL_PROBLEM' | 'STRIKE' | 'DEMONSTRATION' | 'ACCIDENT' | 'HOLIDAY' | 'WEATHER' | 'MAINTENANCE' | 'CONSTRUCTION' | 'POLICE_ACTIVITY' | 'MEDICAL_EMERGENCY' | integer(), % = 6, enum Alert.Cause
        effect                  => 'NO_SERVICE' | 'REDUCED_SERVICE' | 'SIGNIFICANT_DELAYS' | 'DETOUR' | 'ADDITIONAL_SERVICE' | 'MODIFIED_SERVICE' | 'OTHER_EFFECT' | 'UNKNOWN_EFFECT' | 'STOP_MOVED' | integer(), % = 7, enum Alert.Effect
        url                     => 'TranslatedString'(), % = 8
        header_text             => 'TranslatedString'(), % = 10
        description_text        => 'TranslatedString'() % = 11
       }.

-type 'TimeRange'() ::
      #{start                   => non_neg_integer(), % = 1, 32 bits
        'end'                   => non_neg_integer() % = 2, 32 bits
       }.

-type 'Position'() ::
      #{latitude                := float() | integer() | infinity | '-infinity' | nan, % = 1
        longitude               := float() | integer() | infinity | '-infinity' | nan, % = 2
        bearing                 => float() | integer() | infinity | '-infinity' | nan, % = 3
        odometer                => float() | integer() | infinity | '-infinity' | nan, % = 4
        speed                   => float() | integer() | infinity | '-infinity' | nan % = 5
       }.

-type 'TripDescriptor'() ::
      #{trip_id                 => iodata(),        % = 1
        route_id                => iodata(),        % = 5
        direction_id            => non_neg_integer(), % = 6, 32 bits
        start_time              => iodata(),        % = 2
        start_date              => iodata(),        % = 3
        schedule_relationship   => 'SCHEDULED' | 'ADDED' | 'UNSCHEDULED' | 'CANCELED' | integer() % = 4, enum TripDescriptor.ScheduleRelationship
       }.

-type 'VehicleDescriptor'() ::
      #{id                      => iodata(),        % = 1
        label                   => iodata(),        % = 2
        license_plate           => iodata()         % = 3
       }.

-type 'EntitySelector'() ::
      #{agency_id               => iodata(),        % = 1
        route_id                => iodata(),        % = 2
        route_type              => integer(),       % = 3, 32 bits
        trip                    => 'TripDescriptor'(), % = 4
        stop_id                 => iodata()         % = 5
       }.

-type 'TranslatedString.Translation'() ::
      #{text                    := iodata(),        % = 1
        language                => iodata()         % = 2
       }.

-type 'TranslatedString'() ::
      #{translation             => ['TranslatedString.Translation'()] % = 1
       }.

-export_type(['FeedMessage'/0, 'FeedHeader'/0, 'FeedEntity'/0, 'TripUpdate.StopTimeEvent'/0, 'TripUpdate.StopTimeUpdate'/0, 'TripUpdate'/0, 'VehiclePosition'/0, 'Alert'/0, 'TimeRange'/0, 'Position'/0, 'TripDescriptor'/0, 'VehicleDescriptor'/0, 'EntitySelector'/0, 'TranslatedString.Translation'/0, 'TranslatedString'/0]).

-spec encode_msg('FeedMessage'() | 'FeedHeader'() | 'FeedEntity'() | 'TripUpdate.StopTimeEvent'() | 'TripUpdate.StopTimeUpdate'() | 'TripUpdate'() | 'VehiclePosition'() | 'Alert'() | 'TimeRange'() | 'Position'() | 'TripDescriptor'() | 'VehicleDescriptor'() | 'EntitySelector'() | 'TranslatedString.Translation'() | 'TranslatedString'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('FeedMessage'() | 'FeedHeader'() | 'FeedEntity'() | 'TripUpdate.StopTimeEvent'() | 'TripUpdate.StopTimeUpdate'() | 'TripUpdate'() | 'VehiclePosition'() | 'Alert'() | 'TimeRange'() | 'Position'() | 'TripDescriptor'() | 'VehicleDescriptor'() | 'EntitySelector'() | 'TranslatedString.Translation'() | 'TranslatedString'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'FeedMessage' ->
	  encode_msg_FeedMessage(id(Msg, TrUserData), TrUserData);
      'FeedHeader' ->
	  encode_msg_FeedHeader(id(Msg, TrUserData), TrUserData);
      'FeedEntity' ->
	  encode_msg_FeedEntity(id(Msg, TrUserData), TrUserData);
      'TripUpdate.StopTimeEvent' ->
	  'encode_msg_TripUpdate.StopTimeEvent'(id(Msg,
						   TrUserData),
						TrUserData);
      'TripUpdate.StopTimeUpdate' ->
	  'encode_msg_TripUpdate.StopTimeUpdate'(id(Msg,
						    TrUserData),
						 TrUserData);
      'TripUpdate' ->
	  encode_msg_TripUpdate(id(Msg, TrUserData), TrUserData);
      'VehiclePosition' ->
	  encode_msg_VehiclePosition(id(Msg, TrUserData),
				     TrUserData);
      'Alert' ->
	  encode_msg_Alert(id(Msg, TrUserData), TrUserData);
      'TimeRange' ->
	  encode_msg_TimeRange(id(Msg, TrUserData), TrUserData);
      'Position' ->
	  encode_msg_Position(id(Msg, TrUserData), TrUserData);
      'TripDescriptor' ->
	  encode_msg_TripDescriptor(id(Msg, TrUserData),
				    TrUserData);
      'VehicleDescriptor' ->
	  encode_msg_VehicleDescriptor(id(Msg, TrUserData),
				       TrUserData);
      'EntitySelector' ->
	  encode_msg_EntitySelector(id(Msg, TrUserData),
				    TrUserData);
      'TranslatedString.Translation' ->
	  'encode_msg_TranslatedString.Translation'(id(Msg,
						       TrUserData),
						    TrUserData);
      'TranslatedString' ->
	  encode_msg_TranslatedString(id(Msg, TrUserData),
				      TrUserData)
    end.


encode_msg_FeedMessage(Msg, TrUserData) ->
    encode_msg_FeedMessage(Msg, <<>>, TrUserData).


encode_msg_FeedMessage(#{header := F1} = M, Bin,
		       TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_FeedMessage_header(TrF1, <<Bin/binary, 10>>,
				       TrUserData)
	 end,
    case M of
      #{entity := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true -> e_field_FeedMessage_entity(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_FeedHeader(Msg, TrUserData) ->
    encode_msg_FeedHeader(Msg, <<>>, TrUserData).


encode_msg_FeedHeader(#{gtfs_realtime_version := F1} =
			  M,
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = case M of
	   #{incrementality := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 'e_enum_FeedHeader.Incrementality'(TrF2,
						    <<B1/binary, 16>>,
						    TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{timestamp := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_FeedEntity(Msg, TrUserData) ->
    encode_msg_FeedEntity(Msg, <<>>, TrUserData).


encode_msg_FeedEntity(#{id := F1} = M, Bin,
		      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = case M of
	   #{is_deleted := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{trip_update := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_mfield_FeedEntity_trip_update(TrF3, <<B2/binary, 26>>,
						 TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{vehicle := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_mfield_FeedEntity_vehicle(TrF4, <<B3/binary, 34>>,
					     TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{alert := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_mfield_FeedEntity_alert(TrF5, <<B4/binary, 42>>,
				      TrUserData)
	  end;
      _ -> B4
    end.

'encode_msg_TripUpdate.StopTimeEvent'(Msg,
				      TrUserData) ->
    'encode_msg_TripUpdate.StopTimeEvent'(Msg, <<>>,
					  TrUserData).


'encode_msg_TripUpdate.StopTimeEvent'(#{} = M, Bin,
				      TrUserData) ->
    B1 = case M of
	   #{delay := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{time := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{uncertainty := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	  end;
      _ -> B2
    end.

'encode_msg_TripUpdate.StopTimeUpdate'(Msg,
				       TrUserData) ->
    'encode_msg_TripUpdate.StopTimeUpdate'(Msg, <<>>,
					   TrUserData).


'encode_msg_TripUpdate.StopTimeUpdate'(#{} = M, Bin,
				       TrUserData) ->
    B1 = case M of
	   #{stop_sequence := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{stop_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 34>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{arrival := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 'e_mfield_TripUpdate.StopTimeUpdate_arrival'(TrF3,
							      <<B2/binary, 18>>,
							      TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{departure := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 'e_mfield_TripUpdate.StopTimeUpdate_departure'(TrF4,
								<<B3/binary,
								  26>>,
								TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{schedule_relationship := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    'e_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(TrF5,
								    <<B4/binary,
								      40>>,
								    TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_TripUpdate(Msg, TrUserData) ->
    encode_msg_TripUpdate(Msg, <<>>, TrUserData).


encode_msg_TripUpdate(#{trip := F1} = M, Bin,
		      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_TripUpdate_trip(TrF1, <<Bin/binary, 10>>,
				    TrUserData)
	 end,
    B2 = case M of
	   #{vehicle := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_mfield_TripUpdate_vehicle(TrF2, <<B1/binary, 26>>,
					     TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{stop_time_update := F3} ->
	       TrF3 = id(F3, TrUserData),
	       if TrF3 == [] -> B2;
		  true ->
		      e_field_TripUpdate_stop_time_update(TrF3, B2,
							  TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{timestamp := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{delay := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_VehiclePosition(Msg, TrUserData) ->
    encode_msg_VehiclePosition(Msg, <<>>, TrUserData).


encode_msg_VehiclePosition(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{trip := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_mfield_VehiclePosition_trip(TrF1, <<Bin/binary, 10>>,
					       TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{vehicle := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_mfield_VehiclePosition_vehicle(TrF2,
						  <<B1/binary, 66>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{position := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_mfield_VehiclePosition_position(TrF3,
						   <<B2/binary, 18>>,
						   TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{current_stop_sequence := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_varint(TrF4, <<B3/binary, 24>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{stop_id := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 e_type_string(TrF5, <<B4/binary, 58>>, TrUserData)
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{current_status := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 'e_enum_VehiclePosition.VehicleStopStatus'(TrF6,
							    <<B5/binary, 32>>,
							    TrUserData)
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{timestamp := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 e_varint(TrF7, <<B6/binary, 40>>, TrUserData)
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{congestion_level := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 'e_enum_VehiclePosition.CongestionLevel'(TrF8,
							  <<B7/binary, 48>>,
							  TrUserData)
	       end;
	   _ -> B7
	 end,
    case M of
      #{occupancy_status := F9} ->
	  begin
	    TrF9 = id(F9, TrUserData),
	    'e_enum_VehiclePosition.OccupancyStatus'(TrF9,
						     <<B8/binary, 72>>,
						     TrUserData)
	  end;
      _ -> B8
    end.

encode_msg_Alert(Msg, TrUserData) ->
    encode_msg_Alert(Msg, <<>>, TrUserData).


encode_msg_Alert(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{active_period := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_Alert_active_period(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{informed_entity := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true ->
		      e_field_Alert_informed_entity(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{cause := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 'e_enum_Alert.Cause'(TrF3, <<B2/binary, 48>>,
				      TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{effect := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 'e_enum_Alert.Effect'(TrF4, <<B3/binary, 56>>,
				       TrUserData)
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{url := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 e_mfield_Alert_url(TrF5, <<B4/binary, 66>>, TrUserData)
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{header_text := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 e_mfield_Alert_header_text(TrF6, <<B5/binary, 82>>,
					    TrUserData)
	       end;
	   _ -> B5
	 end,
    case M of
      #{description_text := F7} ->
	  begin
	    TrF7 = id(F7, TrUserData),
	    e_mfield_Alert_description_text(TrF7, <<B6/binary, 90>>,
					    TrUserData)
	  end;
      _ -> B6
    end.

encode_msg_TimeRange(Msg, TrUserData) ->
    encode_msg_TimeRange(Msg, <<>>, TrUserData).


encode_msg_TimeRange(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{start := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{'end' := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_Position(Msg, TrUserData) ->
    encode_msg_Position(Msg, <<>>, TrUserData).


encode_msg_Position(#{latitude := F1, longitude := F2} =
			M,
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
	 end,
    B3 = case M of
	   #{bearing := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{odometer := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_type_double(TrF4, <<B3/binary, 33>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{speed := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_TripDescriptor(Msg, TrUserData) ->
    encode_msg_TripDescriptor(Msg, <<>>, TrUserData).


encode_msg_TripDescriptor(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{trip_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{route_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 42>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{direction_id := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_varint(TrF3, <<B2/binary, 48>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{start_time := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_type_string(TrF4, <<B3/binary, 18>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{start_date := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 e_type_string(TrF5, <<B4/binary, 26>>, TrUserData)
	       end;
	   _ -> B4
	 end,
    case M of
      #{schedule_relationship := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    'e_enum_TripDescriptor.ScheduleRelationship'(TrF6,
							 <<B5/binary, 32>>,
							 TrUserData)
	  end;
      _ -> B5
    end.

encode_msg_VehicleDescriptor(Msg, TrUserData) ->
    encode_msg_VehicleDescriptor(Msg, <<>>, TrUserData).


encode_msg_VehicleDescriptor(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{label := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{license_plate := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_EntitySelector(Msg, TrUserData) ->
    encode_msg_EntitySelector(Msg, <<>>, TrUserData).


encode_msg_EntitySelector(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{agency_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{route_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{route_type := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{trip := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_mfield_EntitySelector_trip(TrF4, <<B3/binary, 34>>,
					      TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{stop_id := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	  end;
      _ -> B4
    end.

'encode_msg_TranslatedString.Translation'(Msg,
					  TrUserData) ->
    'encode_msg_TranslatedString.Translation'(Msg, <<>>,
					      TrUserData).


'encode_msg_TranslatedString.Translation'(#{text :=
						F1} =
					      M,
					  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    case M of
      #{language := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_TranslatedString(Msg, TrUserData) ->
    encode_msg_TranslatedString(Msg, <<>>, TrUserData).


encode_msg_TranslatedString(#{} = M, Bin, TrUserData) ->
    case M of
      #{translation := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_TranslatedString_translation(TrF1, Bin,
						      TrUserData)
	  end;
      _ -> Bin
    end.

e_mfield_FeedMessage_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_FeedHeader(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FeedMessage_entity(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_FeedEntity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FeedMessage_entity([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_FeedMessage_entity(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_FeedMessage_entity(Rest, Bin3, TrUserData);
e_field_FeedMessage_entity([], Bin, _TrUserData) -> Bin.

e_mfield_FeedEntity_trip_update(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TripUpdate(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FeedEntity_vehicle(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_VehiclePosition(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FeedEntity_alert(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Alert(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_TripUpdate.StopTimeUpdate_arrival'(Msg, Bin,
					     TrUserData) ->
    SubBin = 'encode_msg_TripUpdate.StopTimeEvent'(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_TripUpdate.StopTimeUpdate_departure'(Msg, Bin,
					       TrUserData) ->
    SubBin = 'encode_msg_TripUpdate.StopTimeEvent'(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TripUpdate_trip(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TripDescriptor(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TripUpdate_vehicle(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_VehicleDescriptor(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TripUpdate_stop_time_update(Msg, Bin,
				     TrUserData) ->
    SubBin = 'encode_msg_TripUpdate.StopTimeUpdate'(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TripUpdate_stop_time_update([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_TripUpdate_stop_time_update(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_TripUpdate_stop_time_update(Rest, Bin3,
					TrUserData);
e_field_TripUpdate_stop_time_update([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_VehiclePosition_trip(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TripDescriptor(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_VehiclePosition_vehicle(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_VehicleDescriptor(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_VehiclePosition_position(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_Position(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Alert_active_period(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeRange(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Alert_active_period([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Alert_active_period(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_Alert_active_period(Rest, Bin3, TrUserData);
e_field_Alert_active_period([], Bin, _TrUserData) ->
    Bin.

e_mfield_Alert_informed_entity(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_EntitySelector(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Alert_informed_entity([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_Alert_informed_entity(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_Alert_informed_entity(Rest, Bin3, TrUserData);
e_field_Alert_informed_entity([], Bin, _TrUserData) ->
    Bin.

e_mfield_Alert_url(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TranslatedString(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Alert_header_text(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TranslatedString(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Alert_description_text(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TranslatedString(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_EntitySelector_trip(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TripDescriptor(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TranslatedString_translation(Msg, Bin,
				      TrUserData) ->
    SubBin = 'encode_msg_TranslatedString.Translation'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TranslatedString_translation([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_TranslatedString_translation(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_TranslatedString_translation(Rest, Bin3,
					 TrUserData);
e_field_TranslatedString_translation([], Bin,
				     _TrUserData) ->
    Bin.

'e_enum_FeedHeader.Incrementality'('FULL_DATASET', Bin,
				   _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_FeedHeader.Incrementality'('DIFFERENTIAL', Bin,
				   _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_FeedHeader.Incrementality'(V, Bin,
				   _TrUserData) ->
    e_varint(V, Bin).

'e_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'('SCHEDULED',
							Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'('SKIPPED',
							Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'('NO_DATA',
							Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(V,
							Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_VehiclePosition.VehicleStopStatus'('INCOMING_AT',
					   Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_VehiclePosition.VehicleStopStatus'('STOPPED_AT',
					   Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_VehiclePosition.VehicleStopStatus'('IN_TRANSIT_TO',
					   Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_VehiclePosition.VehicleStopStatus'(V, Bin,
					   _TrUserData) ->
    e_varint(V, Bin).

'e_enum_VehiclePosition.CongestionLevel'('UNKNOWN_CONGESTION_LEVEL',
					 Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_VehiclePosition.CongestionLevel'('RUNNING_SMOOTHLY',
					 Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_VehiclePosition.CongestionLevel'('STOP_AND_GO',
					 Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_VehiclePosition.CongestionLevel'('CONGESTION',
					 Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_VehiclePosition.CongestionLevel'('SEVERE_CONGESTION',
					 Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_VehiclePosition.CongestionLevel'(V, Bin,
					 _TrUserData) ->
    e_varint(V, Bin).

'e_enum_VehiclePosition.OccupancyStatus'('EMPTY', Bin,
					 _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_VehiclePosition.OccupancyStatus'('MANY_SEATS_AVAILABLE',
					 Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_VehiclePosition.OccupancyStatus'('FEW_SEATS_AVAILABLE',
					 Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_VehiclePosition.OccupancyStatus'('STANDING_ROOM_ONLY',
					 Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_VehiclePosition.OccupancyStatus'('CRUSHED_STANDING_ROOM_ONLY',
					 Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_VehiclePosition.OccupancyStatus'('FULL', Bin,
					 _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_VehiclePosition.OccupancyStatus'('NOT_ACCEPTING_PASSENGERS',
					 Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_VehiclePosition.OccupancyStatus'(V, Bin,
					 _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Alert.Cause'('UNKNOWN_CAUSE', Bin,
		     _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Alert.Cause'('OTHER_CAUSE', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Alert.Cause'('TECHNICAL_PROBLEM', Bin,
		     _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Alert.Cause'('STRIKE', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_Alert.Cause'('DEMONSTRATION', Bin,
		     _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_Alert.Cause'('ACCIDENT', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_Alert.Cause'('HOLIDAY', Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_Alert.Cause'('WEATHER', Bin, _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_Alert.Cause'('MAINTENANCE', Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_Alert.Cause'('CONSTRUCTION', Bin,
		     _TrUserData) ->
    <<Bin/binary, 10>>;
'e_enum_Alert.Cause'('POLICE_ACTIVITY', Bin,
		     _TrUserData) ->
    <<Bin/binary, 11>>;
'e_enum_Alert.Cause'('MEDICAL_EMERGENCY', Bin,
		     _TrUserData) ->
    <<Bin/binary, 12>>;
'e_enum_Alert.Cause'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Alert.Effect'('NO_SERVICE', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Alert.Effect'('REDUCED_SERVICE', Bin,
		      _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Alert.Effect'('SIGNIFICANT_DELAYS', Bin,
		      _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Alert.Effect'('DETOUR', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_Alert.Effect'('ADDITIONAL_SERVICE', Bin,
		      _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_Alert.Effect'('MODIFIED_SERVICE', Bin,
		      _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_Alert.Effect'('OTHER_EFFECT', Bin,
		      _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_Alert.Effect'('UNKNOWN_EFFECT', Bin,
		      _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_Alert.Effect'('STOP_MOVED', Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_Alert.Effect'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_TripDescriptor.ScheduleRelationship'('SCHEDULED',
					     Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_TripDescriptor.ScheduleRelationship'('ADDED',
					     Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_TripDescriptor.ScheduleRelationship'('UNSCHEDULED',
					     Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_TripDescriptor.ScheduleRelationship'('CANCELED',
					     Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_TripDescriptor.ScheduleRelationship'(V, Bin,
					     _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('FeedMessage', Bin, TrUserData) ->
    id(decode_msg_FeedMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FeedHeader', Bin, TrUserData) ->
    id(decode_msg_FeedHeader(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FeedEntity', Bin, TrUserData) ->
    id(decode_msg_FeedEntity(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TripUpdate.StopTimeEvent', Bin,
		  TrUserData) ->
    id('decode_msg_TripUpdate.StopTimeEvent'(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit('TripUpdate.StopTimeUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_TripUpdate.StopTimeUpdate'(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit('TripUpdate', Bin, TrUserData) ->
    id(decode_msg_TripUpdate(Bin, TrUserData), TrUserData);
decode_msg_2_doit('VehiclePosition', Bin, TrUserData) ->
    id(decode_msg_VehiclePosition(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Alert', Bin, TrUserData) ->
    id(decode_msg_Alert(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeRange', Bin, TrUserData) ->
    id(decode_msg_TimeRange(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Position', Bin, TrUserData) ->
    id(decode_msg_Position(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TripDescriptor', Bin, TrUserData) ->
    id(decode_msg_TripDescriptor(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('VehicleDescriptor', Bin,
		  TrUserData) ->
    id(decode_msg_VehicleDescriptor(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('EntitySelector', Bin, TrUserData) ->
    id(decode_msg_EntitySelector(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('TranslatedString.Translation', Bin,
		  TrUserData) ->
    id('decode_msg_TranslatedString.Translation'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('TranslatedString', Bin,
		  TrUserData) ->
    id(decode_msg_TranslatedString(Bin, TrUserData),
       TrUserData).



decode_msg_FeedMessage(Bin, TrUserData) ->
    dfp_read_field_def_FeedMessage(Bin, 0, 0,
				   id('$undef', TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_FeedMessage(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_FeedMessage_header(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_FeedMessage(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_FeedMessage_entity(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_FeedMessage(<<>>, 0, 0, F@_1, R1,
			       TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{entity => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_FeedMessage(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_FeedMessage(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_FeedMessage(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FeedMessage(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_FeedMessage(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FeedMessage_header(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_FeedMessage_entity(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FeedMessage(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_FeedMessage(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_FeedMessage(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_FeedMessage(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_FeedMessage(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_FeedMessage(<<>>, 0, 0, F@_1, R1,
			      TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{header => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{entity => lists_reverse(R1, TrUserData)}
    end.

d_field_FeedMessage_header(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_FeedMessage_header(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_FeedMessage_header(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_FeedHeader(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FeedMessage(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_FeedHeader(Prev, NewFValue,
							       TrUserData)
				   end,
				   F@_2, TrUserData).

d_field_FeedMessage_entity(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_FeedMessage_entity(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_FeedMessage_entity(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_FeedEntity(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FeedMessage(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_FeedMessage(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_FeedMessage(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_FeedMessage(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_FeedMessage(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_FeedMessage(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_FeedMessage(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_FeedMessage(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FeedMessage(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_FeedMessage(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FeedMessage(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_FeedMessage(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_FeedMessage(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_FeedMessage(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_FeedMessage(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_FeedHeader(Bin, TrUserData) ->
    dfp_read_field_def_FeedHeader(Bin, 0, 0,
				  id('$undef', TrUserData),
				  id('FULL_DATASET', TrUserData),
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_FeedHeader(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_FeedHeader_gtfs_realtime_version(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_FeedHeader(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_FeedHeader_incrementality(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_FeedHeader(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_FeedHeader_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_FeedHeader(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    S1 = #{gtfs_realtime_version => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{incrementality => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{timestamp => F@_3}
    end;
dfp_read_field_def_FeedHeader(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_FeedHeader(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_FeedHeader(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FeedHeader(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_FeedHeader(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FeedHeader_gtfs_realtime_version(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      16 ->
	  d_field_FeedHeader_incrementality(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      24 ->
	  d_field_FeedHeader_timestamp(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FeedHeader(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_FeedHeader(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_FeedHeader(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_FeedHeader(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_FeedHeader(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_FeedHeader(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    S1 = #{gtfs_realtime_version => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{incrementality => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{timestamp => F@_3}
    end.

d_field_FeedHeader_gtfs_realtime_version(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_FeedHeader_gtfs_realtime_version(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
d_field_FeedHeader_gtfs_realtime_version(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_FeedHeader(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, TrUserData).

d_field_FeedHeader_incrementality(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_FeedHeader_incrementality(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_FeedHeader_incrementality(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_FeedHeader.Incrementality'(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_FeedHeader(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, TrUserData).

d_field_FeedHeader_timestamp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_FeedHeader_timestamp(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_FeedHeader_timestamp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_FeedHeader(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, TrUserData).

skip_varint_FeedHeader(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_FeedHeader(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_FeedHeader(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_FeedHeader(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_FeedHeader(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_FeedHeader(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_FeedHeader(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FeedHeader(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_FeedHeader(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FeedHeader(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_FeedHeader(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_FeedHeader(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_FeedHeader(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_FeedHeader(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

decode_msg_FeedEntity(Bin, TrUserData) ->
    dfp_read_field_def_FeedEntity(Bin, 0, 0,
				  id('$undef', TrUserData),
				  id(false, TrUserData),
				  id('$undef', TrUserData),
				  id('$undef', TrUserData),
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_FeedEntity(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FeedEntity_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_FeedEntity(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FeedEntity_is_deleted(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_FeedEntity(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FeedEntity_trip_update(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_FeedEntity(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FeedEntity_vehicle(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_FeedEntity(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FeedEntity_alert(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_FeedEntity(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    S1 = #{id => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{is_deleted => F@_2}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{trip_update => F@_3}
	 end,
    S4 = if F@_4 == '$undef' -> S3;
	    true -> S3#{vehicle => F@_4}
	 end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{alert => F@_5}
    end;
dfp_read_field_def_FeedEntity(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_FeedEntity(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_FeedEntity(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FeedEntity(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_FeedEntity(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FeedEntity_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      16 ->
	  d_field_FeedEntity_is_deleted(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_FeedEntity_trip_update(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_FeedEntity_vehicle(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      42 ->
	  d_field_FeedEntity_alert(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FeedEntity(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_FeedEntity(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_FeedEntity(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_FeedEntity(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_FeedEntity(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_FeedEntity(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    S1 = #{id => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{is_deleted => F@_2}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{trip_update => F@_3}
	 end,
    S4 = if F@_4 == '$undef' -> S3;
	    true -> S3#{vehicle => F@_4}
	 end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{alert => F@_5}
    end.

d_field_FeedEntity_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FeedEntity_id(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FeedEntity_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_FeedEntity(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_FeedEntity_is_deleted(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FeedEntity_is_deleted(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_FeedEntity_is_deleted(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_FeedEntity(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_FeedEntity_trip_update(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FeedEntity_trip_update(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_FeedEntity_trip_update(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TripUpdate(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FeedEntity(RestF, 0, 0, F@_1, F@_2,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_TripUpdate(Prev, NewFValue,
							      TrUserData)
				  end,
				  F@_4, F@_5, TrUserData).

d_field_FeedEntity_vehicle(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FeedEntity_vehicle(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FeedEntity_vehicle(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_VehiclePosition(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FeedEntity(RestF, 0, 0, F@_1, F@_2,
				  F@_3,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_VehiclePosition(Prev,
								   NewFValue,
								   TrUserData)
				  end,
				  F@_5, TrUserData).

d_field_FeedEntity_alert(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FeedEntity_alert(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FeedEntity_alert(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Alert(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FeedEntity(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_Alert(Prev, NewFValue,
							 TrUserData)
				  end,
				  TrUserData).

skip_varint_FeedEntity(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_FeedEntity(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_FeedEntity(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_FeedEntity(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_FeedEntity(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_FeedEntity(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_FeedEntity(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FeedEntity(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_FeedEntity(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FeedEntity(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_FeedEntity(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_FeedEntity(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_FeedEntity(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_FeedEntity(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

'decode_msg_TripUpdate.StopTimeEvent'(Bin,
				      TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(Bin, 0, 0,
						  id('$undef', TrUserData),
						  id('$undef', TrUserData),
						  id('$undef', TrUserData),
						  TrUserData).

'dfp_read_field_def_TripUpdate.StopTimeEvent'(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'd_field_TripUpdate.StopTimeEvent_delay'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeEvent'(<<16,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'd_field_TripUpdate.StopTimeEvent_time'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeEvent'(<<24,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'd_field_TripUpdate.StopTimeEvent_uncertainty'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeEvent'(<<>>, 0,
					      0, F@_1, F@_2, F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{delay => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{time => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{uncertainty => F@_3}
    end;
'dfp_read_field_def_TripUpdate.StopTimeEvent'(Other, Z1,
					      Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'dg_read_field_def_TripUpdate.StopTimeEvent'(Other, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData).

'dg_read_field_def_TripUpdate.StopTimeEvent'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_TripUpdate.StopTimeEvent'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
'dg_read_field_def_TripUpdate.StopTimeEvent'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_TripUpdate.StopTimeEvent_delay'(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      16 ->
	  'd_field_TripUpdate.StopTimeEvent_time'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      24 ->
	  'd_field_TripUpdate.StopTimeEvent_uncertainty'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_TripUpdate.StopTimeEvent'(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_TripUpdate.StopTimeEvent'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_TripUpdate.StopTimeEvent'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
	    3 ->
		'skip_group_TripUpdate.StopTimeEvent'(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3,
						      TrUserData);
	    5 ->
		'skip_32_TripUpdate.StopTimeEvent'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_TripUpdate.StopTimeEvent'(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{delay => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{time => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{uncertainty => F@_3}
    end.

'd_field_TripUpdate.StopTimeEvent_delay'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeEvent_delay'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
'd_field_TripUpdate.StopTimeEvent_delay'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  TrUserData).

'd_field_TripUpdate.StopTimeEvent_time'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeEvent_time'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
'd_field_TripUpdate.StopTimeEvent_time'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(RestF, 0,
						  0, F@_1, NewFValue, F@_3,
						  TrUserData).

'd_field_TripUpdate.StopTimeEvent_uncertainty'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeEvent_uncertainty'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'd_field_TripUpdate.StopTimeEvent_uncertainty'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(RestF, 0,
						  0, F@_1, F@_2, NewFValue,
						  TrUserData).

'skip_varint_TripUpdate.StopTimeEvent'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_TripUpdate.StopTimeEvent'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'skip_varint_TripUpdate.StopTimeEvent'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

'skip_length_delimited_TripUpdate.StopTimeEvent'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 57 ->
    'skip_length_delimited_TripUpdate.StopTimeEvent'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
'skip_length_delimited_TripUpdate.StopTimeEvent'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(Rest2, 0,
						  0, F@_1, F@_2, F@_3,
						  TrUserData).

'skip_group_TripUpdate.StopTimeEvent'(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(Rest, 0,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

'skip_32_TripUpdate.StopTimeEvent'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

'skip_64_TripUpdate.StopTimeEvent'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeEvent'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

'decode_msg_TripUpdate.StopTimeUpdate'(Bin,
				       TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(Bin, 0,
						   0, id('$undef', TrUserData),
						   id('$undef', TrUserData),
						   id('$undef', TrUserData),
						   id('$undef', TrUserData),
						   id('SCHEDULED', TrUserData),
						   TrUserData).

'dfp_read_field_def_TripUpdate.StopTimeUpdate'(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'd_field_TripUpdate.StopTimeUpdate_stop_sequence'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeUpdate'(<<34,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'd_field_TripUpdate.StopTimeUpdate_stop_id'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeUpdate'(<<18,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'd_field_TripUpdate.StopTimeUpdate_arrival'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeUpdate'(<<26,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'd_field_TripUpdate.StopTimeUpdate_departure'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeUpdate'(<<40,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'd_field_TripUpdate.StopTimeUpdate_schedule_relationship'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData);
'dfp_read_field_def_TripUpdate.StopTimeUpdate'(<<>>, 0,
					       0, F@_1, F@_2, F@_3, F@_4, F@_5,
					       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{stop_sequence => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{stop_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{arrival => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{departure => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{schedule_relationship => F@_5}
    end;
'dfp_read_field_def_TripUpdate.StopTimeUpdate'(Other,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'dg_read_field_def_TripUpdate.StopTimeUpdate'(Other, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData).

'dg_read_field_def_TripUpdate.StopTimeUpdate'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_TripUpdate.StopTimeUpdate'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
'dg_read_field_def_TripUpdate.StopTimeUpdate'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_TripUpdate.StopTimeUpdate_stop_sequence'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    TrUserData);
      34 ->
	  'd_field_TripUpdate.StopTimeUpdate_stop_id'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      18 ->
	  'd_field_TripUpdate.StopTimeUpdate_arrival'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      26 ->
	  'd_field_TripUpdate.StopTimeUpdate_departure'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      40 ->
	  'd_field_TripUpdate.StopTimeUpdate_schedule_relationship'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_TripUpdate.StopTimeUpdate'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
	    1 ->
		'skip_64_TripUpdate.StopTimeUpdate'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    2 ->
		'skip_length_delimited_TripUpdate.StopTimeUpdate'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData);
	    3 ->
		'skip_group_TripUpdate.StopTimeUpdate'(Rest, Key bsr 3,
						       0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, TrUserData);
	    5 ->
		'skip_32_TripUpdate.StopTimeUpdate'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData)
	  end
    end;
'dg_read_field_def_TripUpdate.StopTimeUpdate'(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, F@_5,
					      _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{stop_sequence => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{stop_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{arrival => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{departure => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{schedule_relationship => F@_5}
    end.

'd_field_TripUpdate.StopTimeUpdate_stop_sequence'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeUpdate_stop_sequence'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
'd_field_TripUpdate.StopTimeUpdate_stop_sequence'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, F@_2, F@_3, F@_4,
						  F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(RestF, 0,
						   0, NewFValue, F@_2, F@_3,
						   F@_4, F@_5, TrUserData).

'd_field_TripUpdate.StopTimeUpdate_stop_id'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeUpdate_stop_id'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
'd_field_TripUpdate.StopTimeUpdate_stop_id'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(RestF, 0,
						   0, F@_1, NewFValue, F@_3,
						   F@_4, F@_5, TrUserData).

'd_field_TripUpdate.StopTimeUpdate_arrival'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeUpdate_arrival'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
'd_field_TripUpdate.StopTimeUpdate_arrival'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, Prev, F@_4,
					    F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_TripUpdate.StopTimeEvent'(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(RestF, 0,
						   0, F@_1, F@_2,
						   if Prev == '$undef' ->
							  NewFValue;
						      true ->
							  'merge_msg_TripUpdate.StopTimeEvent'(Prev,
											       NewFValue,
											       TrUserData)
						   end,
						   F@_4, F@_5, TrUserData).

'd_field_TripUpdate.StopTimeUpdate_departure'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeUpdate_departure'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
'd_field_TripUpdate.StopTimeUpdate_departure'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, Prev,
					      F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_TripUpdate.StopTimeEvent'(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(RestF, 0,
						   0, F@_1, F@_2, F@_3,
						   if Prev == '$undef' ->
							  NewFValue;
						      true ->
							  'merge_msg_TripUpdate.StopTimeEvent'(Prev,
											       NewFValue,
											       TrUserData)
						   end,
						   F@_5, TrUserData).

'd_field_TripUpdate.StopTimeUpdate_schedule_relationship'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData)
    when N < 57 ->
    'd_field_TripUpdate.StopTimeUpdate_schedule_relationship'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5,
							      TrUserData);
'd_field_TripUpdate.StopTimeUpdate_schedule_relationship'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, _,
							  TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(begin
								      <<Res:32/signed-native>> =
									  <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
								      id(Res,
									 TrUserData)
								    end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(RestF, 0,
						   0, F@_1, F@_2, F@_3, F@_4,
						   NewFValue, TrUserData).

'skip_varint_TripUpdate.StopTimeUpdate'(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    'skip_varint_TripUpdate.StopTimeUpdate'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData);
'skip_varint_TripUpdate.StopTimeUpdate'(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData).

'skip_length_delimited_TripUpdate.StopTimeUpdate'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, TrUserData)
    when N < 57 ->
    'skip_length_delimited_TripUpdate.StopTimeUpdate'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
'skip_length_delimited_TripUpdate.StopTimeUpdate'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(Rest2, 0,
						   0, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData).

'skip_group_TripUpdate.StopTimeUpdate'(Bin, FNum, Z2,
				       F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(Rest, 0,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData).

'skip_32_TripUpdate.StopTimeUpdate'(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData).

'skip_64_TripUpdate.StopTimeUpdate'(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    'dfp_read_field_def_TripUpdate.StopTimeUpdate'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData).

decode_msg_TripUpdate(Bin, TrUserData) ->
    dfp_read_field_def_TripUpdate(Bin, 0, 0,
				  id('$undef', TrUserData),
				  id('$undef', TrUserData), id([], TrUserData),
				  id('$undef', TrUserData),
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_TripUpdate(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_TripUpdate_trip(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_TripUpdate(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_TripUpdate_vehicle(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TripUpdate(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_TripUpdate_stop_time_update(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TripUpdate(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_TripUpdate_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TripUpdate(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_TripUpdate_delay(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_TripUpdate(<<>>, 0, 0, F@_1, F@_2,
			      R1, F@_4, F@_5, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trip => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{vehicle => F@_2}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{stop_time_update => lists_reverse(R1, TrUserData)}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{timestamp => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{delay => F@_5}
    end;
dfp_read_field_def_TripUpdate(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_TripUpdate(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_TripUpdate(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TripUpdate(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_TripUpdate(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TripUpdate_trip(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      26 ->
	  d_field_TripUpdate_vehicle(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      18 ->
	  d_field_TripUpdate_stop_time_update(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      32 ->
	  d_field_TripUpdate_timestamp(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_TripUpdate_delay(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TripUpdate(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_TripUpdate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_TripUpdate(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_TripUpdate(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_TripUpdate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_TripUpdate(<<>>, 0, 0, F@_1, F@_2, R1,
			     F@_4, F@_5, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trip => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{vehicle => F@_2}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{stop_time_update => lists_reverse(R1, TrUserData)}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{timestamp => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{delay => F@_5}
    end.

d_field_TripUpdate_trip(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_TripUpdate_trip(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TripUpdate_trip(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TripDescriptor(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TripUpdate(RestF, 0, 0,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_TripDescriptor(Prev,
								  NewFValue,
								  TrUserData)
				  end,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_TripUpdate_vehicle(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_TripUpdate_vehicle(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TripUpdate_vehicle(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_VehicleDescriptor(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TripUpdate(RestF, 0, 0, F@_1,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_VehicleDescriptor(Prev,
								     NewFValue,
								     TrUserData)
				  end,
				  F@_3, F@_4, F@_5, TrUserData).

d_field_TripUpdate_stop_time_update(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_TripUpdate_stop_time_update(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_TripUpdate_stop_time_update(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_TripUpdate.StopTimeUpdate'(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TripUpdate(RestF, 0, 0, F@_1, F@_2,
				  cons(NewFValue, Prev, TrUserData), F@_4, F@_5,
				  TrUserData).

d_field_TripUpdate_timestamp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_TripUpdate_timestamp(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TripUpdate_timestamp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TripUpdate(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, TrUserData).

d_field_TripUpdate_delay(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_TripUpdate_delay(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TripUpdate_delay(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_TripUpdate(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, TrUserData).

skip_varint_TripUpdate(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_TripUpdate(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_TripUpdate(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_TripUpdate(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_TripUpdate(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_TripUpdate(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_TripUpdate(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TripUpdate(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_TripUpdate(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TripUpdate(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_TripUpdate(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_TripUpdate(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_TripUpdate(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_TripUpdate(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_VehiclePosition(Bin, TrUserData) ->
    dfp_read_field_def_VehiclePosition(Bin, 0, 0,
				       id('$undef', TrUserData),
				       id('$undef', TrUserData),
				       id('$undef', TrUserData),
				       id('$undef', TrUserData),
				       id('$undef', TrUserData),
				       id('IN_TRANSIT_TO', TrUserData),
				       id('$undef', TrUserData),
				       id('$undef', TrUserData),
				       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_VehiclePosition(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_trip(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
dfp_read_field_def_VehiclePosition(<<66, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_vehicle(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, TrUserData);
dfp_read_field_def_VehiclePosition(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_position(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData);
dfp_read_field_def_VehiclePosition(<<24, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_current_stop_sequence(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  TrUserData);
dfp_read_field_def_VehiclePosition(<<58, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_stop_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, TrUserData);
dfp_read_field_def_VehiclePosition(<<32, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_current_status(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_VehiclePosition(<<40, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_timestamp(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData);
dfp_read_field_def_VehiclePosition(<<48, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_congestion_level(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_VehiclePosition(<<72, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData) ->
    d_field_VehiclePosition_occupancy_status(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_VehiclePosition(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trip => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{vehicle => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{position => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{current_stop_sequence => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{stop_id => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{current_status => F@_6}
	 end,
    S8 = if F@_7 == '$undef' -> S7;
	    true -> S7#{timestamp => F@_7}
	 end,
    S9 = if F@_8 == '$undef' -> S8;
	    true -> S8#{congestion_level => F@_8}
	 end,
    if F@_9 == '$undef' -> S9;
       true -> S9#{occupancy_status => F@_9}
    end;
dfp_read_field_def_VehiclePosition(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, TrUserData) ->
    dg_read_field_def_VehiclePosition(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, TrUserData).

dg_read_field_def_VehiclePosition(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VehiclePosition(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dg_read_field_def_VehiclePosition(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VehiclePosition_trip(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
      66 ->
	  d_field_VehiclePosition_vehicle(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, TrUserData);
      18 ->
	  d_field_VehiclePosition_position(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, TrUserData);
      24 ->
	  d_field_VehiclePosition_current_stop_sequence(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, TrUserData);
      58 ->
	  d_field_VehiclePosition_stop_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, TrUserData);
      32 ->
	  d_field_VehiclePosition_current_status(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, TrUserData);
      40 ->
	  d_field_VehiclePosition_timestamp(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, TrUserData);
      48 ->
	  d_field_VehiclePosition_congestion_level(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   TrUserData);
      72 ->
	  d_field_VehiclePosition_occupancy_status(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VehiclePosition(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					    F@_9, TrUserData);
	    1 ->
		skip_64_VehiclePosition(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					TrUserData);
	    2 ->
		skip_length_delimited_VehiclePosition(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      TrUserData);
	    3 ->
		skip_group_VehiclePosition(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					   F@_8, F@_9, TrUserData);
	    5 ->
		skip_32_VehiclePosition(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					TrUserData)
	  end
    end;
dg_read_field_def_VehiclePosition(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trip => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{vehicle => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{position => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{current_stop_sequence => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{stop_id => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{current_status => F@_6}
	 end,
    S8 = if F@_7 == '$undef' -> S7;
	    true -> S7#{timestamp => F@_7}
	 end,
    S9 = if F@_8 == '$undef' -> S8;
	    true -> S8#{congestion_level => F@_8}
	 end,
    if F@_9 == '$undef' -> S9;
       true -> S9#{occupancy_status => F@_9}
    end.

d_field_VehiclePosition_trip(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_trip(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, TrUserData);
d_field_VehiclePosition_trip(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TripDescriptor(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_VehiclePosition(RestF, 0, 0,
				       if Prev == '$undef' -> NewFValue;
					  true ->
					      merge_msg_TripDescriptor(Prev,
								       NewFValue,
								       TrUserData)
				       end,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData).

d_field_VehiclePosition_vehicle(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_vehicle(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_VehiclePosition_vehicle(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_VehicleDescriptor(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       if Prev == '$undef' -> NewFValue;
					  true ->
					      merge_msg_VehicleDescriptor(Prev,
									  NewFValue,
									  TrUserData)
				       end,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData).

d_field_VehiclePosition_position(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_position(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_VehiclePosition_position(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Position(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       F@_2,
				       if Prev == '$undef' -> NewFValue;
					  true ->
					      merge_msg_Position(Prev,
								 NewFValue,
								 TrUserData)
				       end,
				       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData).

d_field_VehiclePosition_current_stop_sequence(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_current_stop_sequence(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, TrUserData);
d_field_VehiclePosition_current_stop_sequence(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					      F@_6, F@_7, F@_8, F@_9,
					      TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				       F@_8, F@_9, TrUserData).

d_field_VehiclePosition_stop_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_stop_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_VehiclePosition_stop_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7,
				       F@_8, F@_9, TrUserData).

d_field_VehiclePosition_current_status(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_current_status(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   TrUserData);
d_field_VehiclePosition_current_status(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				       F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_VehiclePosition.VehicleStopStatus'(begin
							 <<Res:32/signed-native>> =
							     <<(X bsl N +
								  Acc):32/unsigned-native>>,
							 id(Res, TrUserData)
						       end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7,
				       F@_8, F@_9, TrUserData).

d_field_VehiclePosition_timestamp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_timestamp(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_VehiclePosition_timestamp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
				  F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue,
				       F@_8, F@_9, TrUserData).

d_field_VehiclePosition_congestion_level(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_congestion_level(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     TrUserData);
d_field_VehiclePosition_congestion_level(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, _, F@_9, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_VehiclePosition.CongestionLevel'(begin
						       <<Res:32/signed-native>> =
							   <<(X bsl N +
								Acc):32/unsigned-native>>,
						       id(Res, TrUserData)
						     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       NewFValue, F@_9, TrUserData).

d_field_VehiclePosition_occupancy_status(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_VehiclePosition_occupancy_status(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     TrUserData);
d_field_VehiclePosition_occupancy_status(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_VehiclePosition.OccupancyStatus'(begin
						       <<Res:32/signed-native>> =
							   <<(X bsl N +
								Acc):32/unsigned-native>>,
						       id(Res, TrUserData)
						     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_VehiclePosition(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       NewFValue, TrUserData).

skip_varint_VehiclePosition(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, TrUserData) ->
    skip_varint_VehiclePosition(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				TrUserData);
skip_varint_VehiclePosition(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_VehiclePosition(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData).

skip_length_delimited_VehiclePosition(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_VehiclePosition(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9,
					  TrUserData);
skip_length_delimited_VehiclePosition(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VehiclePosition(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData).

skip_group_VehiclePosition(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VehiclePosition(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData).

skip_32_VehiclePosition(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			TrUserData) ->
    dfp_read_field_def_VehiclePosition(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData).

skip_64_VehiclePosition(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			TrUserData) ->
    dfp_read_field_def_VehiclePosition(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData).

decode_msg_Alert(Bin, TrUserData) ->
    dfp_read_field_def_Alert(Bin, 0, 0, id([], TrUserData),
			     id([], TrUserData),
			     id('UNKNOWN_CAUSE', TrUserData),
			     id('UNKNOWN_EFFECT', TrUserData),
			     id('$undef', TrUserData), id('$undef', TrUserData),
			     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Alert(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_Alert_active_period(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Alert(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_Alert_informed_entity(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Alert(<<48, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_Alert_cause(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Alert(<<56, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_Alert_effect(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Alert(<<66, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_Alert_url(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Alert(<<82, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_Alert_header_text(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Alert(<<90, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_Alert_description_text(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Alert(<<>>, 0, 0, R1, R2, F@_3, F@_4,
			 F@_5, F@_6, F@_7, TrUserData) ->
    S1 = #{},
    S2 = if R1 == '$undef' -> S1;
	    true ->
		S1#{active_period => lists_reverse(R1, TrUserData)}
	 end,
    S3 = if R2 == '$undef' -> S2;
	    true ->
		S2#{informed_entity => lists_reverse(R2, TrUserData)}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{cause => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{effect => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{url => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{header_text => F@_6}
	 end,
    if F@_7 == '$undef' -> S7;
       true -> S7#{description_text => F@_7}
    end;
dfp_read_field_def_Alert(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_Alert(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_Alert(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Alert(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
dg_read_field_def_Alert(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Alert_active_period(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_Alert_informed_entity(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
      48 ->
	  d_field_Alert_cause(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      56 ->
	  d_field_Alert_effect(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      66 ->
	  d_field_Alert_url(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, TrUserData);
      82 ->
	  d_field_Alert_header_text(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      90 ->
	  d_field_Alert_description_text(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Alert(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_Alert(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_Alert(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
	    3 ->
		skip_group_Alert(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_Alert(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_Alert(<<>>, 0, 0, R1, R2, F@_3, F@_4,
			F@_5, F@_6, F@_7, TrUserData) ->
    S1 = #{},
    S2 = if R1 == '$undef' -> S1;
	    true ->
		S1#{active_period => lists_reverse(R1, TrUserData)}
	 end,
    S3 = if R2 == '$undef' -> S2;
	    true ->
		S2#{informed_entity => lists_reverse(R2, TrUserData)}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{cause => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{effect => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{url => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{header_text => F@_6}
	 end,
    if F@_7 == '$undef' -> S7;
       true -> S7#{description_text => F@_7}
    end.

d_field_Alert_active_period(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    d_field_Alert_active_period(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
d_field_Alert_active_period(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TimeRange(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Alert(RestF, 0, 0,
			     cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Alert_informed_entity(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    d_field_Alert_informed_entity(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
d_field_Alert_informed_entity(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_EntitySelector(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Alert(RestF, 0, 0, F@_1,
			     cons(NewFValue, Prev, TrUserData), F@_3, F@_4,
			     F@_5, F@_6, F@_7, TrUserData).

d_field_Alert_cause(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Alert_cause(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Alert_cause(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Alert.Cause'(begin
						    <<Res:32/signed-native>> =
							<<(X bsl N +
							     Acc):32/unsigned-native>>,
						    id(Res, TrUserData)
						  end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Alert(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Alert_effect(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Alert_effect(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Alert_effect(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Alert.Effect'(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Alert(RestF, 0, 0, F@_1, F@_2, F@_3,
			     NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_Alert_url(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Alert_url(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Alert_url(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TranslatedString(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Alert(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_TranslatedString(Prev, NewFValue,
							       TrUserData)
			     end,
			     F@_6, F@_7, TrUserData).

d_field_Alert_header_text(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_Alert_header_text(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_Alert_header_text(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TranslatedString(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Alert(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_TranslatedString(Prev, NewFValue,
							       TrUserData)
			     end,
			     F@_7, TrUserData).

d_field_Alert_description_text(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData)
    when N < 57 ->
    d_field_Alert_description_text(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, TrUserData);
d_field_Alert_description_text(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TranslatedString(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Alert(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_TranslatedString(Prev, NewFValue,
							       TrUserData)
			     end,
			     TrUserData).

skip_varint_Alert(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_Alert(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
skip_varint_Alert(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Alert(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_Alert(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    skip_length_delimited_Alert(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
skip_length_delimited_Alert(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Alert(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_Alert(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Alert(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_Alert(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Alert(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_Alert(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Alert(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_TimeRange(Bin, TrUserData) ->
    dfp_read_field_def_TimeRange(Bin, 0, 0,
				 id('$undef', TrUserData),
				 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_TimeRange(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_TimeRange_start(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_TimeRange(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_TimeRange_end(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_TimeRange(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{start => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{'end' => F@_2}
    end;
dfp_read_field_def_TimeRange(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_TimeRange(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_TimeRange(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TimeRange(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_TimeRange(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TimeRange_start(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_TimeRange_end(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TimeRange(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_TimeRange(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_TimeRange(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_TimeRange(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_TimeRange(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_TimeRange(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{start => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{'end' => F@_2}
    end.

d_field_TimeRange_start(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_TimeRange_start(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_TimeRange_start(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TimeRange(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_TimeRange_end(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_TimeRange_end(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_TimeRange_end(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TimeRange(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_TimeRange(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_TimeRange(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_TimeRange(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_TimeRange(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_TimeRange(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TimeRange(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_TimeRange(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeRange(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_TimeRange(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeRange(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_TimeRange(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_TimeRange(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_TimeRange(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_TimeRange(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_Position(Bin, TrUserData) ->
    dfp_read_field_def_Position(Bin, 0, 0,
				id('$undef', TrUserData),
				id('$undef', TrUserData),
				id('$undef', TrUserData),
				id('$undef', TrUserData),
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Position(<<13, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Position_latitude(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Position(<<21, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Position_longitude(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Position(<<29, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Position_bearing(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Position(<<33, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Position_odometer(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Position(<<45, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Position_speed(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Position(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    S1 = #{latitude => F@_1, longitude => F@_2},
    S2 = if F@_3 == '$undef' -> S1;
	    true -> S1#{bearing => F@_3}
	 end,
    S3 = if F@_4 == '$undef' -> S2;
	    true -> S2#{odometer => F@_4}
	 end,
    if F@_5 == '$undef' -> S3;
       true -> S3#{speed => F@_5}
    end;
dfp_read_field_def_Position(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Position(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Position(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Position(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Position(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_Position_latitude(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      21 ->
	  d_field_Position_longitude(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      29 ->
	  d_field_Position_bearing(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      33 ->
	  d_field_Position_odometer(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      45 ->
	  d_field_Position_speed(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Position(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_Position(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Position(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Position(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Position(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Position(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    S1 = #{latitude => F@_1, longitude => F@_2},
    S2 = if F@_3 == '$undef' -> S1;
	    true -> S1#{bearing => F@_3}
	 end,
    S3 = if F@_4 == '$undef' -> S2;
	    true -> S2#{odometer => F@_4}
	 end,
    if F@_5 == '$undef' -> S3;
       true -> S3#{speed => F@_5}
    end.

d_field_Position_latitude(<<0:16, 128, 127,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2,
				id(infinity, TrUserData), F@_2, F@_3, F@_4,
				F@_5, TrUserData);
d_field_Position_latitude(<<0:16, 128, 255,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2,
				id('-infinity', TrUserData), F@_2, F@_3, F@_4,
				F@_5, TrUserData);
d_field_Position_latitude(<<_:16, 1:1, _:7, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2,
				id(nan, TrUserData), F@_2, F@_3, F@_4, F@_5,
				TrUserData);
d_field_Position_latitude(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2,
				id(Value, TrUserData), F@_2, F@_3, F@_4, F@_5,
				TrUserData).

d_field_Position_longitude(<<0:16, 128, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1,
				id(infinity, TrUserData), F@_3, F@_4, F@_5,
				TrUserData);
d_field_Position_longitude(<<0:16, 128, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1,
				id('-infinity', TrUserData), F@_3, F@_4, F@_5,
				TrUserData);
d_field_Position_longitude(<<_:16, 1:1, _:7, _:1, 127:7,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1,
				id(nan, TrUserData), F@_3, F@_4, F@_5,
				TrUserData);
d_field_Position_longitude(<<Value:32/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1,
				id(Value, TrUserData), F@_3, F@_4, F@_5,
				TrUserData).

d_field_Position_bearing(<<0:16, 128, 127,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				id(infinity, TrUserData), F@_4, F@_5,
				TrUserData);
d_field_Position_bearing(<<0:16, 128, 255,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				id('-infinity', TrUserData), F@_4, F@_5,
				TrUserData);
d_field_Position_bearing(<<_:16, 1:1, _:7, _:1, 127:7,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				id(nan, TrUserData), F@_4, F@_5, TrUserData);
d_field_Position_bearing(<<Value:32/little-float,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				id(Value, TrUserData), F@_4, F@_5, TrUserData).

d_field_Position_odometer(<<0:48, 240, 127,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, id(infinity, TrUserData), F@_5,
				TrUserData);
d_field_Position_odometer(<<0:48, 240, 255,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, id('-infinity', TrUserData), F@_5,
				TrUserData);
d_field_Position_odometer(<<_:48, 15:4, _:4, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, id(nan, TrUserData), F@_5, TrUserData);
d_field_Position_odometer(<<Value:64/little-float,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, id(Value, TrUserData), F@_5, TrUserData).

d_field_Position_speed(<<0:16, 128, 127, Rest/binary>>,
		       Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, id(infinity, TrUserData),
				TrUserData);
d_field_Position_speed(<<0:16, 128, 255, Rest/binary>>,
		       Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, id('-infinity', TrUserData),
				TrUserData);
d_field_Position_speed(<<_:16, 1:1, _:7, _:1, 127:7,
			 Rest/binary>>,
		       Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, id(nan, TrUserData), TrUserData);
d_field_Position_speed(<<Value:32/little-float,
			 Rest/binary>>,
		       Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, id(Value, TrUserData), TrUserData).

skip_varint_Position(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Position(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_Position(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Position(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Position(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_Position(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Position(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_Position(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Position(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_Position(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_Position(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Position(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

decode_msg_TripDescriptor(Bin, TrUserData) ->
    dfp_read_field_def_TripDescriptor(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_TripDescriptor(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_TripDescriptor_trip_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TripDescriptor(<<42, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_TripDescriptor_route_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TripDescriptor(<<48, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_TripDescriptor_direction_id(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData);
dfp_read_field_def_TripDescriptor(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_TripDescriptor_start_time(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TripDescriptor(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_TripDescriptor_start_date(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TripDescriptor(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_TripDescriptor_schedule_relationship(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData);
dfp_read_field_def_TripDescriptor(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trip_id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{route_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{direction_id => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{start_time => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{start_date => F@_5}
	 end,
    if F@_6 == '$undef' -> S6;
       true -> S6#{schedule_relationship => F@_6}
    end;
dfp_read_field_def_TripDescriptor(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_TripDescriptor(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_TripDescriptor(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TripDescriptor(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
dg_read_field_def_TripDescriptor(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TripDescriptor_trip_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
      42 ->
	  d_field_TripDescriptor_route_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  d_field_TripDescriptor_direction_id(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
      18 ->
	  d_field_TripDescriptor_start_time(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
      26 ->
	  d_field_TripDescriptor_start_date(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
      32 ->
	  d_field_TripDescriptor_schedule_relationship(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TripDescriptor(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_TripDescriptor(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_TripDescriptor(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
	    3 ->
		skip_group_TripDescriptor(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
	    5 ->
		skip_32_TripDescriptor(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_TripDescriptor(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trip_id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{route_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{direction_id => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{start_time => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{start_date => F@_5}
	 end,
    if F@_6 == '$undef' -> S6;
       true -> S6#{schedule_relationship => F@_6}
    end.

d_field_TripDescriptor_trip_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    d_field_TripDescriptor_trip_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
d_field_TripDescriptor_trip_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_TripDescriptor(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_TripDescriptor_route_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_TripDescriptor_route_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_TripDescriptor_route_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_TripDescriptor(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_TripDescriptor_direction_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData)
    when N < 57 ->
    d_field_TripDescriptor_direction_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, TrUserData);
d_field_TripDescriptor_direction_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TripDescriptor(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_TripDescriptor_start_time(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 57 ->
    d_field_TripDescriptor_start_time(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
d_field_TripDescriptor_start_time(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_TripDescriptor(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, F@_6,
				      TrUserData).

d_field_TripDescriptor_start_date(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 57 ->
    d_field_TripDescriptor_start_date(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
d_field_TripDescriptor_start_date(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_TripDescriptor(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, F@_6,
				      TrUserData).

d_field_TripDescriptor_schedule_relationship(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_TripDescriptor_schedule_relationship(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
d_field_TripDescriptor_schedule_relationship(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_TripDescriptor.ScheduleRelationship'(begin
							   <<Res:32/signed-native>> =
							       <<(X bsl N +
								    Acc):32/unsigned-native>>,
							   id(Res, TrUserData)
							 end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_TripDescriptor(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, NewFValue,
				      TrUserData).

skip_varint_TripDescriptor(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    skip_varint_TripDescriptor(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_TripDescriptor(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_TripDescriptor(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_TripDescriptor(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_TripDescriptor(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
skip_length_delimited_TripDescriptor(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TripDescriptor(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_TripDescriptor(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TripDescriptor(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_TripDescriptor(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_TripDescriptor(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_TripDescriptor(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_TripDescriptor(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_VehicleDescriptor(Bin, TrUserData) ->
    dfp_read_field_def_VehicleDescriptor(Bin, 0, 0,
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_VehicleDescriptor(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_VehicleDescriptor_id(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_VehicleDescriptor(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_VehicleDescriptor_label(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_VehicleDescriptor(<<26,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_VehicleDescriptor_license_plate(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_VehicleDescriptor(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{label => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{license_plate => F@_3}
    end;
dfp_read_field_def_VehicleDescriptor(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_VehicleDescriptor(Other, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

dg_read_field_def_VehicleDescriptor(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VehicleDescriptor(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
dg_read_field_def_VehicleDescriptor(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VehicleDescriptor_id(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      18 ->
	  d_field_VehicleDescriptor_label(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      26 ->
	  d_field_VehicleDescriptor_license_plate(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VehicleDescriptor(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    1 ->
		skip_64_VehicleDescriptor(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    2 ->
		skip_length_delimited_VehicleDescriptor(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    3 ->
		skip_group_VehicleDescriptor(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_VehicleDescriptor(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData)
	  end
    end;
dg_read_field_def_VehicleDescriptor(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{label => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{license_plate => F@_3}
    end.

d_field_VehicleDescriptor_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_VehicleDescriptor_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_VehicleDescriptor_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_VehicleDescriptor(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, TrUserData).

d_field_VehicleDescriptor_label(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_VehicleDescriptor_label(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_VehicleDescriptor_label(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_VehicleDescriptor(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, TrUserData).

d_field_VehicleDescriptor_license_plate(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_VehicleDescriptor_license_plate(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
d_field_VehicleDescriptor_license_plate(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_VehicleDescriptor(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, TrUserData).

skip_varint_VehicleDescriptor(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_VehicleDescriptor(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
skip_varint_VehicleDescriptor(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_VehicleDescriptor(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_length_delimited_VehicleDescriptor(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_VehicleDescriptor(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
skip_length_delimited_VehicleDescriptor(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VehicleDescriptor(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, TrUserData).

skip_group_VehicleDescriptor(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VehicleDescriptor(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_32_VehicleDescriptor(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_VehicleDescriptor(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_64_VehicleDescriptor(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_VehicleDescriptor(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

decode_msg_EntitySelector(Bin, TrUserData) ->
    dfp_read_field_def_EntitySelector(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_EntitySelector(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_EntitySelector_agency_id(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_EntitySelector(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_EntitySelector_route_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_EntitySelector(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_EntitySelector_route_type(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_EntitySelector(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_EntitySelector_trip(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_EntitySelector(<<42, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_EntitySelector_stop_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_EntitySelector(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{agency_id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{route_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{route_type => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{trip => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{stop_id => F@_5}
    end;
dfp_read_field_def_EntitySelector(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_EntitySelector(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_EntitySelector(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EntitySelector(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
dg_read_field_def_EntitySelector(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EntitySelector_agency_id(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      18 ->
	  d_field_EntitySelector_route_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_EntitySelector_route_type(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_EntitySelector_trip(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_EntitySelector_stop_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EntitySelector(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_EntitySelector(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_EntitySelector(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    3 ->
		skip_group_EntitySelector(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_EntitySelector(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_EntitySelector(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{agency_id => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{route_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{route_type => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{trip => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{stop_id => F@_5}
    end.

d_field_EntitySelector_agency_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_EntitySelector_agency_id(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_EntitySelector_agency_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_EntitySelector(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5,
				      TrUserData).

d_field_EntitySelector_route_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_EntitySelector_route_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_EntitySelector_route_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_EntitySelector(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_EntitySelector_route_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_EntitySelector_route_type(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_EntitySelector_route_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_EntitySelector(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_EntitySelector_trip(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_EntitySelector_trip(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_EntitySelector_trip(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_TripDescriptor(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_EntitySelector(RestF, 0, 0, F@_1,
				      F@_2, F@_3,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_TripDescriptor(Prev,
								      NewFValue,
								      TrUserData)
				      end,
				      F@_5, TrUserData).

d_field_EntitySelector_stop_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_EntitySelector_stop_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_EntitySelector_stop_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_EntitySelector(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_EntitySelector(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_EntitySelector(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
skip_varint_EntitySelector(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_EntitySelector(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_EntitySelector(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_EntitySelector(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
skip_length_delimited_EntitySelector(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EntitySelector(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_EntitySelector(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EntitySelector(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_EntitySelector(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_EntitySelector(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_EntitySelector(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_EntitySelector(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_TranslatedString.Translation'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_TranslatedString.Translation'(Bin,
						      0, 0,
						      id('$undef', TrUserData),
						      id('$undef', TrUserData),
						      TrUserData).

'dfp_read_field_def_TranslatedString.Translation'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'd_field_TranslatedString.Translation_text'(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_TranslatedString.Translation'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'd_field_TranslatedString.Translation_language'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
'dfp_read_field_def_TranslatedString.Translation'(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    S1 = #{text => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{language => F@_2}
    end;
'dfp_read_field_def_TranslatedString.Translation'(Other,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dg_read_field_def_TranslatedString.Translation'(Other,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'dg_read_field_def_TranslatedString.Translation'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_TranslatedString.Translation'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
'dg_read_field_def_TranslatedString.Translation'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_TranslatedString.Translation_text'(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      18 ->
	  'd_field_TranslatedString.Translation_language'(Rest, 0,
							  0, F@_1, F@_2,
							  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_TranslatedString.Translation'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    1 ->
		'skip_64_TranslatedString.Translation'(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_TranslatedString.Translation'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    3 ->
		'skip_group_TranslatedString.Translation'(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, TrUserData);
	    5 ->
		'skip_32_TranslatedString.Translation'(Rest, 0, 0, F@_1,
						       F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_TranslatedString.Translation'(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    S1 = #{text => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{language => F@_2}
    end.

'd_field_TranslatedString.Translation_text'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_TranslatedString.Translation_text'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'd_field_TranslatedString.Translation_text'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_TranslatedString.Translation'(RestF,
						      0, 0, NewFValue, F@_2,
						      TrUserData).

'd_field_TranslatedString.Translation_language'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_TranslatedString.Translation_language'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'd_field_TranslatedString.Translation_language'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_TranslatedString.Translation'(RestF,
						      0, 0, F@_1, NewFValue,
						      TrUserData).

'skip_varint_TranslatedString.Translation'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_TranslatedString.Translation'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
'skip_varint_TranslatedString.Translation'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_TranslatedString.Translation'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

'skip_length_delimited_TranslatedString.Translation'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    'skip_length_delimited_TranslatedString.Translation'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'skip_length_delimited_TranslatedString.Translation'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_TranslatedString.Translation'(Rest2,
						      0, 0, F@_1, F@_2,
						      TrUserData).

'skip_group_TranslatedString.Translation'(Bin, FNum, Z2,
					  F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_TranslatedString.Translation'(Rest,
						      0, Z2, F@_1, F@_2,
						      TrUserData).

'skip_32_TranslatedString.Translation'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_TranslatedString.Translation'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

'skip_64_TranslatedString.Translation'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_TranslatedString.Translation'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

decode_msg_TranslatedString(Bin, TrUserData) ->
    dfp_read_field_def_TranslatedString(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_TranslatedString(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_TranslatedString_translation(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_TranslatedString(<<>>, 0, 0, R1,
				    TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
	   S1#{translation => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_TranslatedString(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_TranslatedString(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_TranslatedString(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TranslatedString(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_TranslatedString(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TranslatedString_translation(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TranslatedString(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_TranslatedString(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_TranslatedString(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_TranslatedString(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_TranslatedString(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_TranslatedString(<<>>, 0, 0, R1,
				   TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
	   S1#{translation => lists_reverse(R1, TrUserData)}
    end.

d_field_TranslatedString_translation(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TranslatedString_translation(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_TranslatedString_translation(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_TranslatedString.Translation'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_TranslatedString(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_TranslatedString(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_TranslatedString(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_TranslatedString(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_TranslatedString(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_TranslatedString(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_TranslatedString(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_TranslatedString(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TranslatedString(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_TranslatedString(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TranslatedString(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_TranslatedString(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_TranslatedString(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_TranslatedString(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_TranslatedString(Rest, Z1, Z2, F@_1,
					TrUserData).

'd_enum_FeedHeader.Incrementality'(0) -> 'FULL_DATASET';
'd_enum_FeedHeader.Incrementality'(1) -> 'DIFFERENTIAL';
'd_enum_FeedHeader.Incrementality'(V) -> V.

'd_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(0) ->
    'SCHEDULED';
'd_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(1) ->
    'SKIPPED';
'd_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(2) ->
    'NO_DATA';
'd_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(V) ->
    V.

'd_enum_VehiclePosition.VehicleStopStatus'(0) ->
    'INCOMING_AT';
'd_enum_VehiclePosition.VehicleStopStatus'(1) ->
    'STOPPED_AT';
'd_enum_VehiclePosition.VehicleStopStatus'(2) ->
    'IN_TRANSIT_TO';
'd_enum_VehiclePosition.VehicleStopStatus'(V) -> V.

'd_enum_VehiclePosition.CongestionLevel'(0) ->
    'UNKNOWN_CONGESTION_LEVEL';
'd_enum_VehiclePosition.CongestionLevel'(1) ->
    'RUNNING_SMOOTHLY';
'd_enum_VehiclePosition.CongestionLevel'(2) ->
    'STOP_AND_GO';
'd_enum_VehiclePosition.CongestionLevel'(3) ->
    'CONGESTION';
'd_enum_VehiclePosition.CongestionLevel'(4) ->
    'SEVERE_CONGESTION';
'd_enum_VehiclePosition.CongestionLevel'(V) -> V.

'd_enum_VehiclePosition.OccupancyStatus'(0) -> 'EMPTY';
'd_enum_VehiclePosition.OccupancyStatus'(1) ->
    'MANY_SEATS_AVAILABLE';
'd_enum_VehiclePosition.OccupancyStatus'(2) ->
    'FEW_SEATS_AVAILABLE';
'd_enum_VehiclePosition.OccupancyStatus'(3) ->
    'STANDING_ROOM_ONLY';
'd_enum_VehiclePosition.OccupancyStatus'(4) ->
    'CRUSHED_STANDING_ROOM_ONLY';
'd_enum_VehiclePosition.OccupancyStatus'(5) -> 'FULL';
'd_enum_VehiclePosition.OccupancyStatus'(6) ->
    'NOT_ACCEPTING_PASSENGERS';
'd_enum_VehiclePosition.OccupancyStatus'(V) -> V.

'd_enum_Alert.Cause'(1) -> 'UNKNOWN_CAUSE';
'd_enum_Alert.Cause'(2) -> 'OTHER_CAUSE';
'd_enum_Alert.Cause'(3) -> 'TECHNICAL_PROBLEM';
'd_enum_Alert.Cause'(4) -> 'STRIKE';
'd_enum_Alert.Cause'(5) -> 'DEMONSTRATION';
'd_enum_Alert.Cause'(6) -> 'ACCIDENT';
'd_enum_Alert.Cause'(7) -> 'HOLIDAY';
'd_enum_Alert.Cause'(8) -> 'WEATHER';
'd_enum_Alert.Cause'(9) -> 'MAINTENANCE';
'd_enum_Alert.Cause'(10) -> 'CONSTRUCTION';
'd_enum_Alert.Cause'(11) -> 'POLICE_ACTIVITY';
'd_enum_Alert.Cause'(12) -> 'MEDICAL_EMERGENCY';
'd_enum_Alert.Cause'(V) -> V.

'd_enum_Alert.Effect'(1) -> 'NO_SERVICE';
'd_enum_Alert.Effect'(2) -> 'REDUCED_SERVICE';
'd_enum_Alert.Effect'(3) -> 'SIGNIFICANT_DELAYS';
'd_enum_Alert.Effect'(4) -> 'DETOUR';
'd_enum_Alert.Effect'(5) -> 'ADDITIONAL_SERVICE';
'd_enum_Alert.Effect'(6) -> 'MODIFIED_SERVICE';
'd_enum_Alert.Effect'(7) -> 'OTHER_EFFECT';
'd_enum_Alert.Effect'(8) -> 'UNKNOWN_EFFECT';
'd_enum_Alert.Effect'(9) -> 'STOP_MOVED';
'd_enum_Alert.Effect'(V) -> V.

'd_enum_TripDescriptor.ScheduleRelationship'(0) ->
    'SCHEDULED';
'd_enum_TripDescriptor.ScheduleRelationship'(1) ->
    'ADDED';
'd_enum_TripDescriptor.ScheduleRelationship'(2) ->
    'UNSCHEDULED';
'd_enum_TripDescriptor.ScheduleRelationship'(3) ->
    'CANCELED';
'd_enum_TripDescriptor.ScheduleRelationship'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'FeedMessage' ->
	  merge_msg_FeedMessage(Prev, New, TrUserData);
      'FeedHeader' ->
	  merge_msg_FeedHeader(Prev, New, TrUserData);
      'FeedEntity' ->
	  merge_msg_FeedEntity(Prev, New, TrUserData);
      'TripUpdate.StopTimeEvent' ->
	  'merge_msg_TripUpdate.StopTimeEvent'(Prev, New,
					       TrUserData);
      'TripUpdate.StopTimeUpdate' ->
	  'merge_msg_TripUpdate.StopTimeUpdate'(Prev, New,
						TrUserData);
      'TripUpdate' ->
	  merge_msg_TripUpdate(Prev, New, TrUserData);
      'VehiclePosition' ->
	  merge_msg_VehiclePosition(Prev, New, TrUserData);
      'Alert' -> merge_msg_Alert(Prev, New, TrUserData);
      'TimeRange' ->
	  merge_msg_TimeRange(Prev, New, TrUserData);
      'Position' -> merge_msg_Position(Prev, New, TrUserData);
      'TripDescriptor' ->
	  merge_msg_TripDescriptor(Prev, New, TrUserData);
      'VehicleDescriptor' ->
	  merge_msg_VehicleDescriptor(Prev, New, TrUserData);
      'EntitySelector' ->
	  merge_msg_EntitySelector(Prev, New, TrUserData);
      'TranslatedString.Translation' ->
	  'merge_msg_TranslatedString.Translation'(Prev, New,
						   TrUserData);
      'TranslatedString' ->
	  merge_msg_TranslatedString(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_FeedMessage/3}).
merge_msg_FeedMessage(#{header := PFheader} = PMsg,
		      #{header := NFheader} = NMsg, TrUserData) ->
    S1 = #{header =>
	       merge_msg_FeedHeader(PFheader, NFheader, TrUserData)},
    case {PMsg, NMsg} of
      {#{entity := PFentity}, #{entity := NFentity}} ->
	  S1#{entity =>
		  'erlang_++'(PFentity, NFentity, TrUserData)};
      {_, #{entity := NFentity}} -> S1#{entity => NFentity};
      {#{entity := PFentity}, _} -> S1#{entity => PFentity};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_FeedHeader/3}).
merge_msg_FeedHeader(#{} = PMsg,
		     #{gtfs_realtime_version := NFgtfs_realtime_version} =
			 NMsg,
		     _) ->
    S1 = #{gtfs_realtime_version =>
	       NFgtfs_realtime_version},
    S2 = case {PMsg, NMsg} of
	   {_, #{incrementality := NFincrementality}} ->
	       S1#{incrementality => NFincrementality};
	   {#{incrementality := PFincrementality}, _} ->
	       S1#{incrementality => PFincrementality};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{timestamp := NFtimestamp}} ->
	  S2#{timestamp => NFtimestamp};
      {#{timestamp := PFtimestamp}, _} ->
	  S2#{timestamp => PFtimestamp};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_FeedEntity/3}).
merge_msg_FeedEntity(#{} = PMsg, #{id := NFid} = NMsg,
		     TrUserData) ->
    S1 = #{id => NFid},
    S2 = case {PMsg, NMsg} of
	   {_, #{is_deleted := NFis_deleted}} ->
	       S1#{is_deleted => NFis_deleted};
	   {#{is_deleted := PFis_deleted}, _} ->
	       S1#{is_deleted => PFis_deleted};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{trip_update := PFtrip_update},
	    #{trip_update := NFtrip_update}} ->
	       S2#{trip_update =>
		       merge_msg_TripUpdate(PFtrip_update, NFtrip_update,
					    TrUserData)};
	   {_, #{trip_update := NFtrip_update}} ->
	       S2#{trip_update => NFtrip_update};
	   {#{trip_update := PFtrip_update}, _} ->
	       S2#{trip_update => PFtrip_update};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{vehicle := PFvehicle}, #{vehicle := NFvehicle}} ->
	       S3#{vehicle =>
		       merge_msg_VehiclePosition(PFvehicle, NFvehicle,
						 TrUserData)};
	   {_, #{vehicle := NFvehicle}} ->
	       S3#{vehicle => NFvehicle};
	   {#{vehicle := PFvehicle}, _} ->
	       S3#{vehicle => PFvehicle};
	   {_, _} -> S3
	 end,
    case {PMsg, NMsg} of
      {#{alert := PFalert}, #{alert := NFalert}} ->
	  S4#{alert =>
		  merge_msg_Alert(PFalert, NFalert, TrUserData)};
      {_, #{alert := NFalert}} -> S4#{alert => NFalert};
      {#{alert := PFalert}, _} -> S4#{alert => PFalert};
      {_, _} -> S4
    end.

-compile({nowarn_unused_function,'merge_msg_TripUpdate.StopTimeEvent'/3}).
'merge_msg_TripUpdate.StopTimeEvent'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{delay := NFdelay}} -> S1#{delay => NFdelay};
	   {#{delay := PFdelay}, _} -> S1#{delay => PFdelay};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{time := NFtime}} -> S2#{time => NFtime};
	   {#{time := PFtime}, _} -> S2#{time => PFtime};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{uncertainty := NFuncertainty}} ->
	  S3#{uncertainty => NFuncertainty};
      {#{uncertainty := PFuncertainty}, _} ->
	  S3#{uncertainty => PFuncertainty};
      _ -> S3
    end.

-compile({nowarn_unused_function,'merge_msg_TripUpdate.StopTimeUpdate'/3}).
'merge_msg_TripUpdate.StopTimeUpdate'(PMsg, NMsg,
				      TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{stop_sequence := NFstop_sequence}} ->
	       S1#{stop_sequence => NFstop_sequence};
	   {#{stop_sequence := PFstop_sequence}, _} ->
	       S1#{stop_sequence => PFstop_sequence};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{stop_id := NFstop_id}} ->
	       S2#{stop_id => NFstop_id};
	   {#{stop_id := PFstop_id}, _} ->
	       S2#{stop_id => PFstop_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{arrival := PFarrival}, #{arrival := NFarrival}} ->
	       S3#{arrival =>
		       'merge_msg_TripUpdate.StopTimeEvent'(PFarrival,
							    NFarrival,
							    TrUserData)};
	   {_, #{arrival := NFarrival}} ->
	       S3#{arrival => NFarrival};
	   {#{arrival := PFarrival}, _} ->
	       S3#{arrival => PFarrival};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{departure := PFdeparture},
	    #{departure := NFdeparture}} ->
	       S4#{departure =>
		       'merge_msg_TripUpdate.StopTimeEvent'(PFdeparture,
							    NFdeparture,
							    TrUserData)};
	   {_, #{departure := NFdeparture}} ->
	       S4#{departure => NFdeparture};
	   {#{departure := PFdeparture}, _} ->
	       S4#{departure => PFdeparture};
	   {_, _} -> S4
	 end,
    case {PMsg, NMsg} of
      {_,
       #{schedule_relationship := NFschedule_relationship}} ->
	  S5#{schedule_relationship => NFschedule_relationship};
      {#{schedule_relationship := PFschedule_relationship},
       _} ->
	  S5#{schedule_relationship => PFschedule_relationship};
      _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_TripUpdate/3}).
merge_msg_TripUpdate(#{trip := PFtrip} = PMsg,
		     #{trip := NFtrip} = NMsg, TrUserData) ->
    S1 = #{trip =>
	       merge_msg_TripDescriptor(PFtrip, NFtrip, TrUserData)},
    S2 = case {PMsg, NMsg} of
	   {#{vehicle := PFvehicle}, #{vehicle := NFvehicle}} ->
	       S1#{vehicle =>
		       merge_msg_VehicleDescriptor(PFvehicle, NFvehicle,
						   TrUserData)};
	   {_, #{vehicle := NFvehicle}} ->
	       S1#{vehicle => NFvehicle};
	   {#{vehicle := PFvehicle}, _} ->
	       S1#{vehicle => PFvehicle};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{stop_time_update := PFstop_time_update},
	    #{stop_time_update := NFstop_time_update}} ->
	       S2#{stop_time_update =>
		       'erlang_++'(PFstop_time_update, NFstop_time_update,
				   TrUserData)};
	   {_, #{stop_time_update := NFstop_time_update}} ->
	       S2#{stop_time_update => NFstop_time_update};
	   {#{stop_time_update := PFstop_time_update}, _} ->
	       S2#{stop_time_update => PFstop_time_update};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{timestamp := NFtimestamp}} ->
	       S3#{timestamp => NFtimestamp};
	   {#{timestamp := PFtimestamp}, _} ->
	       S3#{timestamp => PFtimestamp};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{delay := NFdelay}} -> S4#{delay => NFdelay};
      {#{delay := PFdelay}, _} -> S4#{delay => PFdelay};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_VehiclePosition/3}).
merge_msg_VehiclePosition(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{trip := PFtrip}, #{trip := NFtrip}} ->
	       S1#{trip =>
		       merge_msg_TripDescriptor(PFtrip, NFtrip, TrUserData)};
	   {_, #{trip := NFtrip}} -> S1#{trip => NFtrip};
	   {#{trip := PFtrip}, _} -> S1#{trip => PFtrip};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{vehicle := PFvehicle}, #{vehicle := NFvehicle}} ->
	       S2#{vehicle =>
		       merge_msg_VehicleDescriptor(PFvehicle, NFvehicle,
						   TrUserData)};
	   {_, #{vehicle := NFvehicle}} ->
	       S2#{vehicle => NFvehicle};
	   {#{vehicle := PFvehicle}, _} ->
	       S2#{vehicle => PFvehicle};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{position := PFposition},
	    #{position := NFposition}} ->
	       S3#{position =>
		       merge_msg_Position(PFposition, NFposition, TrUserData)};
	   {_, #{position := NFposition}} ->
	       S3#{position => NFposition};
	   {#{position := PFposition}, _} ->
	       S3#{position => PFposition};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_,
	    #{current_stop_sequence := NFcurrent_stop_sequence}} ->
	       S4#{current_stop_sequence => NFcurrent_stop_sequence};
	   {#{current_stop_sequence := PFcurrent_stop_sequence},
	    _} ->
	       S4#{current_stop_sequence => PFcurrent_stop_sequence};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{stop_id := NFstop_id}} ->
	       S5#{stop_id => NFstop_id};
	   {#{stop_id := PFstop_id}, _} ->
	       S5#{stop_id => PFstop_id};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{current_status := NFcurrent_status}} ->
	       S6#{current_status => NFcurrent_status};
	   {#{current_status := PFcurrent_status}, _} ->
	       S6#{current_status => PFcurrent_status};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{timestamp := NFtimestamp}} ->
	       S7#{timestamp => NFtimestamp};
	   {#{timestamp := PFtimestamp}, _} ->
	       S7#{timestamp => PFtimestamp};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {_, #{congestion_level := NFcongestion_level}} ->
	       S8#{congestion_level => NFcongestion_level};
	   {#{congestion_level := PFcongestion_level}, _} ->
	       S8#{congestion_level => PFcongestion_level};
	   _ -> S8
	 end,
    case {PMsg, NMsg} of
      {_, #{occupancy_status := NFoccupancy_status}} ->
	  S9#{occupancy_status => NFoccupancy_status};
      {#{occupancy_status := PFoccupancy_status}, _} ->
	  S9#{occupancy_status => PFoccupancy_status};
      _ -> S9
    end.

-compile({nowarn_unused_function,merge_msg_Alert/3}).
merge_msg_Alert(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{active_period := PFactive_period},
	    #{active_period := NFactive_period}} ->
	       S1#{active_period =>
		       'erlang_++'(PFactive_period, NFactive_period,
				   TrUserData)};
	   {_, #{active_period := NFactive_period}} ->
	       S1#{active_period => NFactive_period};
	   {#{active_period := PFactive_period}, _} ->
	       S1#{active_period => PFactive_period};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{informed_entity := PFinformed_entity},
	    #{informed_entity := NFinformed_entity}} ->
	       S2#{informed_entity =>
		       'erlang_++'(PFinformed_entity, NFinformed_entity,
				   TrUserData)};
	   {_, #{informed_entity := NFinformed_entity}} ->
	       S2#{informed_entity => NFinformed_entity};
	   {#{informed_entity := PFinformed_entity}, _} ->
	       S2#{informed_entity => PFinformed_entity};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{cause := NFcause}} -> S3#{cause => NFcause};
	   {#{cause := PFcause}, _} -> S3#{cause => PFcause};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{effect := NFeffect}} -> S4#{effect => NFeffect};
	   {#{effect := PFeffect}, _} -> S4#{effect => PFeffect};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{url := PFurl}, #{url := NFurl}} ->
	       S5#{url =>
		       merge_msg_TranslatedString(PFurl, NFurl, TrUserData)};
	   {_, #{url := NFurl}} -> S5#{url => NFurl};
	   {#{url := PFurl}, _} -> S5#{url => PFurl};
	   {_, _} -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {#{header_text := PFheader_text},
	    #{header_text := NFheader_text}} ->
	       S6#{header_text =>
		       merge_msg_TranslatedString(PFheader_text, NFheader_text,
						  TrUserData)};
	   {_, #{header_text := NFheader_text}} ->
	       S6#{header_text => NFheader_text};
	   {#{header_text := PFheader_text}, _} ->
	       S6#{header_text => PFheader_text};
	   {_, _} -> S6
	 end,
    case {PMsg, NMsg} of
      {#{description_text := PFdescription_text},
       #{description_text := NFdescription_text}} ->
	  S7#{description_text =>
		  merge_msg_TranslatedString(PFdescription_text,
					     NFdescription_text, TrUserData)};
      {_, #{description_text := NFdescription_text}} ->
	  S7#{description_text => NFdescription_text};
      {#{description_text := PFdescription_text}, _} ->
	  S7#{description_text => PFdescription_text};
      {_, _} -> S7
    end.

-compile({nowarn_unused_function,merge_msg_TimeRange/3}).
merge_msg_TimeRange(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{start := NFstart}} -> S1#{start => NFstart};
	   {#{start := PFstart}, _} -> S1#{start => PFstart};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{'end' := NFend}} -> S2#{'end' => NFend};
      {#{'end' := PFend}, _} -> S2#{'end' => PFend};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_Position/3}).
merge_msg_Position(#{} = PMsg,
		   #{latitude := NFlatitude, longitude := NFlongitude} =
		       NMsg,
		   _) ->
    S1 = #{latitude => NFlatitude,
	   longitude => NFlongitude},
    S2 = case {PMsg, NMsg} of
	   {_, #{bearing := NFbearing}} ->
	       S1#{bearing => NFbearing};
	   {#{bearing := PFbearing}, _} ->
	       S1#{bearing => PFbearing};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{odometer := NFodometer}} ->
	       S2#{odometer => NFodometer};
	   {#{odometer := PFodometer}, _} ->
	       S2#{odometer => PFodometer};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{speed := NFspeed}} -> S3#{speed => NFspeed};
      {#{speed := PFspeed}, _} -> S3#{speed => PFspeed};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_TripDescriptor/3}).
merge_msg_TripDescriptor(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{trip_id := NFtrip_id}} ->
	       S1#{trip_id => NFtrip_id};
	   {#{trip_id := PFtrip_id}, _} ->
	       S1#{trip_id => PFtrip_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{route_id := NFroute_id}} ->
	       S2#{route_id => NFroute_id};
	   {#{route_id := PFroute_id}, _} ->
	       S2#{route_id => PFroute_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{direction_id := NFdirection_id}} ->
	       S3#{direction_id => NFdirection_id};
	   {#{direction_id := PFdirection_id}, _} ->
	       S3#{direction_id => PFdirection_id};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{start_time := NFstart_time}} ->
	       S4#{start_time => NFstart_time};
	   {#{start_time := PFstart_time}, _} ->
	       S4#{start_time => PFstart_time};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{start_date := NFstart_date}} ->
	       S5#{start_date => NFstart_date};
	   {#{start_date := PFstart_date}, _} ->
	       S5#{start_date => PFstart_date};
	   _ -> S5
	 end,
    case {PMsg, NMsg} of
      {_,
       #{schedule_relationship := NFschedule_relationship}} ->
	  S6#{schedule_relationship => NFschedule_relationship};
      {#{schedule_relationship := PFschedule_relationship},
       _} ->
	  S6#{schedule_relationship => PFschedule_relationship};
      _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_VehicleDescriptor/3}).
merge_msg_VehicleDescriptor(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{id := NFid}} -> S1#{id => NFid};
	   {#{id := PFid}, _} -> S1#{id => PFid};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{label := NFlabel}} -> S2#{label => NFlabel};
	   {#{label := PFlabel}, _} -> S2#{label => PFlabel};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{license_plate := NFlicense_plate}} ->
	  S3#{license_plate => NFlicense_plate};
      {#{license_plate := PFlicense_plate}, _} ->
	  S3#{license_plate => PFlicense_plate};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_EntitySelector/3}).
merge_msg_EntitySelector(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{agency_id := NFagency_id}} ->
	       S1#{agency_id => NFagency_id};
	   {#{agency_id := PFagency_id}, _} ->
	       S1#{agency_id => PFagency_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{route_id := NFroute_id}} ->
	       S2#{route_id => NFroute_id};
	   {#{route_id := PFroute_id}, _} ->
	       S2#{route_id => PFroute_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{route_type := NFroute_type}} ->
	       S3#{route_type => NFroute_type};
	   {#{route_type := PFroute_type}, _} ->
	       S3#{route_type => PFroute_type};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{trip := PFtrip}, #{trip := NFtrip}} ->
	       S4#{trip =>
		       merge_msg_TripDescriptor(PFtrip, NFtrip, TrUserData)};
	   {_, #{trip := NFtrip}} -> S4#{trip => NFtrip};
	   {#{trip := PFtrip}, _} -> S4#{trip => PFtrip};
	   {_, _} -> S4
	 end,
    case {PMsg, NMsg} of
      {_, #{stop_id := NFstop_id}} ->
	  S5#{stop_id => NFstop_id};
      {#{stop_id := PFstop_id}, _} ->
	  S5#{stop_id => PFstop_id};
      _ -> S5
    end.

-compile({nowarn_unused_function,'merge_msg_TranslatedString.Translation'/3}).
'merge_msg_TranslatedString.Translation'(#{} = PMsg,
					 #{text := NFtext} = NMsg, _) ->
    S1 = #{text => NFtext},
    case {PMsg, NMsg} of
      {_, #{language := NFlanguage}} ->
	  S1#{language => NFlanguage};
      {#{language := PFlanguage}, _} ->
	  S1#{language => PFlanguage};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_TranslatedString/3}).
merge_msg_TranslatedString(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{translation := PFtranslation},
       #{translation := NFtranslation}} ->
	  S1#{translation =>
		  'erlang_++'(PFtranslation, NFtranslation, TrUserData)};
      {_, #{translation := NFtranslation}} ->
	  S1#{translation => NFtranslation};
      {#{translation := PFtranslation}, _} ->
	  S1#{translation => PFtranslation};
      {_, _} -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'FeedMessage' ->
	  v_msg_FeedMessage(Msg, [MsgName], TrUserData);
      'FeedHeader' ->
	  v_msg_FeedHeader(Msg, [MsgName], TrUserData);
      'FeedEntity' ->
	  v_msg_FeedEntity(Msg, [MsgName], TrUserData);
      'TripUpdate.StopTimeEvent' ->
	  'v_msg_TripUpdate.StopTimeEvent'(Msg, [MsgName],
					   TrUserData);
      'TripUpdate.StopTimeUpdate' ->
	  'v_msg_TripUpdate.StopTimeUpdate'(Msg, [MsgName],
					    TrUserData);
      'TripUpdate' ->
	  v_msg_TripUpdate(Msg, [MsgName], TrUserData);
      'VehiclePosition' ->
	  v_msg_VehiclePosition(Msg, [MsgName], TrUserData);
      'Alert' -> v_msg_Alert(Msg, [MsgName], TrUserData);
      'TimeRange' ->
	  v_msg_TimeRange(Msg, [MsgName], TrUserData);
      'Position' ->
	  v_msg_Position(Msg, [MsgName], TrUserData);
      'TripDescriptor' ->
	  v_msg_TripDescriptor(Msg, [MsgName], TrUserData);
      'VehicleDescriptor' ->
	  v_msg_VehicleDescriptor(Msg, [MsgName], TrUserData);
      'EntitySelector' ->
	  v_msg_EntitySelector(Msg, [MsgName], TrUserData);
      'TranslatedString.Translation' ->
	  'v_msg_TranslatedString.Translation'(Msg, [MsgName],
					       TrUserData);
      'TranslatedString' ->
	  v_msg_TranslatedString(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_FeedMessage/3}).
-dialyzer({nowarn_function,v_msg_FeedMessage/3}).
v_msg_FeedMessage(#{header := F1} = M, Path,
		  TrUserData) ->
    v_msg_FeedHeader(F1, [header | Path], TrUserData),
    case M of
      #{entity := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_FeedEntity(Elem, [entity | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'FeedEntity'}},
			       F2, [entity | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
		      (entity) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_FeedMessage(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [header] -- maps:keys(M),
		   'FeedMessage'},
		  M, Path);
v_msg_FeedMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FeedMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_FeedHeader/3}).
-dialyzer({nowarn_function,v_msg_FeedHeader/3}).
v_msg_FeedHeader(#{gtfs_realtime_version := F1} = M,
		 Path, TrUserData) ->
    v_type_string(F1, [gtfs_realtime_version | Path],
		  TrUserData),
    case M of
      #{incrementality := F2} ->
	  'v_enum_FeedHeader.Incrementality'(F2,
					     [incrementality | Path],
					     TrUserData);
      _ -> ok
    end,
    case M of
      #{timestamp := F3} ->
	  v_type_uint64(F3, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (gtfs_realtime_version) -> ok;
		      (incrementality) -> ok;
		      (timestamp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_FeedHeader(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [gtfs_realtime_version] -- maps:keys(M), 'FeedHeader'},
		  M, Path);
v_msg_FeedHeader(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FeedHeader'}, X, Path).

-compile({nowarn_unused_function,v_msg_FeedEntity/3}).
-dialyzer({nowarn_function,v_msg_FeedEntity/3}).
v_msg_FeedEntity(#{id := F1} = M, Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData),
    case M of
      #{is_deleted := F2} ->
	  v_type_bool(F2, [is_deleted | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{trip_update := F3} ->
	  v_msg_TripUpdate(F3, [trip_update | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{vehicle := F4} ->
	  v_msg_VehiclePosition(F4, [vehicle | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{alert := F5} ->
	  v_msg_Alert(F5, [alert | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
		      (is_deleted) -> ok;
		      (trip_update) -> ok;
		      (vehicle) -> ok;
		      (alert) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_FeedEntity(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [id] -- maps:keys(M),
		   'FeedEntity'},
		  M, Path);
v_msg_FeedEntity(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FeedEntity'}, X, Path).

-compile({nowarn_unused_function,'v_msg_TripUpdate.StopTimeEvent'/3}).
-dialyzer({nowarn_function,'v_msg_TripUpdate.StopTimeEvent'/3}).
'v_msg_TripUpdate.StopTimeEvent'(#{} = M, Path,
				 TrUserData) ->
    case M of
      #{delay := F1} ->
	  v_type_int32(F1, [delay | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{time := F2} ->
	  v_type_int64(F2, [time | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{uncertainty := F3} ->
	  v_type_int32(F3, [uncertainty | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (delay) -> ok;
		      (time) -> ok;
		      (uncertainty) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_TripUpdate.StopTimeEvent'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TripUpdate.StopTimeEvent'},
		  M, Path);
'v_msg_TripUpdate.StopTimeEvent'(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'TripUpdate.StopTimeEvent'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_TripUpdate.StopTimeUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_TripUpdate.StopTimeUpdate'/3}).
'v_msg_TripUpdate.StopTimeUpdate'(#{} = M, Path,
				  TrUserData) ->
    case M of
      #{stop_sequence := F1} ->
	  v_type_uint32(F1, [stop_sequence | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{stop_id := F2} ->
	  v_type_string(F2, [stop_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{arrival := F3} ->
	  'v_msg_TripUpdate.StopTimeEvent'(F3, [arrival | Path],
					   TrUserData);
      _ -> ok
    end,
    case M of
      #{departure := F4} ->
	  'v_msg_TripUpdate.StopTimeEvent'(F4, [departure | Path],
					   TrUserData);
      _ -> ok
    end,
    case M of
      #{schedule_relationship := F5} ->
	  'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(F5,
								  [schedule_relationship
								   | Path],
								  TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (stop_sequence) -> ok;
		      (stop_id) -> ok;
		      (arrival) -> ok;
		      (departure) -> ok;
		      (schedule_relationship) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_TripUpdate.StopTimeUpdate'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TripUpdate.StopTimeUpdate'},
		  M, Path);
'v_msg_TripUpdate.StopTimeUpdate'(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'TripUpdate.StopTimeUpdate'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_TripUpdate/3}).
-dialyzer({nowarn_function,v_msg_TripUpdate/3}).
v_msg_TripUpdate(#{trip := F1} = M, Path, TrUserData) ->
    v_msg_TripDescriptor(F1, [trip | Path], TrUserData),
    case M of
      #{vehicle := F2} ->
	  v_msg_VehicleDescriptor(F2, [vehicle | Path],
				  TrUserData);
      _ -> ok
    end,
    case M of
      #{stop_time_update := F3} ->
	  if is_list(F3) ->
		 _ = ['v_msg_TripUpdate.StopTimeUpdate'(Elem,
							[stop_time_update
							 | Path],
							TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, 'TripUpdate.StopTimeUpdate'}},
			       F3, [stop_time_update | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{timestamp := F4} ->
	  v_type_uint64(F4, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{delay := F5} ->
	  v_type_int32(F5, [delay | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (trip) -> ok;
		      (vehicle) -> ok;
		      (stop_time_update) -> ok;
		      (timestamp) -> ok;
		      (delay) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TripUpdate(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [trip] -- maps:keys(M),
		   'TripUpdate'},
		  M, Path);
v_msg_TripUpdate(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TripUpdate'}, X, Path).

-compile({nowarn_unused_function,v_msg_VehiclePosition/3}).
-dialyzer({nowarn_function,v_msg_VehiclePosition/3}).
v_msg_VehiclePosition(#{} = M, Path, TrUserData) ->
    case M of
      #{trip := F1} ->
	  v_msg_TripDescriptor(F1, [trip | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{vehicle := F2} ->
	  v_msg_VehicleDescriptor(F2, [vehicle | Path],
				  TrUserData);
      _ -> ok
    end,
    case M of
      #{position := F3} ->
	  v_msg_Position(F3, [position | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{current_stop_sequence := F4} ->
	  v_type_uint32(F4, [current_stop_sequence | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{stop_id := F5} ->
	  v_type_string(F5, [stop_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{current_status := F6} ->
	  'v_enum_VehiclePosition.VehicleStopStatus'(F6,
						     [current_status | Path],
						     TrUserData);
      _ -> ok
    end,
    case M of
      #{timestamp := F7} ->
	  v_type_uint64(F7, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{congestion_level := F8} ->
	  'v_enum_VehiclePosition.CongestionLevel'(F8,
						   [congestion_level | Path],
						   TrUserData);
      _ -> ok
    end,
    case M of
      #{occupancy_status := F9} ->
	  'v_enum_VehiclePosition.OccupancyStatus'(F9,
						   [occupancy_status | Path],
						   TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (trip) -> ok;
		      (vehicle) -> ok;
		      (position) -> ok;
		      (current_stop_sequence) -> ok;
		      (stop_id) -> ok;
		      (current_status) -> ok;
		      (timestamp) -> ok;
		      (congestion_level) -> ok;
		      (occupancy_status) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_VehiclePosition(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'VehiclePosition'},
		  M, Path);
v_msg_VehiclePosition(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'VehiclePosition'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Alert/3}).
-dialyzer({nowarn_function,v_msg_Alert/3}).
v_msg_Alert(#{} = M, Path, TrUserData) ->
    case M of
      #{active_period := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_TimeRange(Elem, [active_period | Path],
				      TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'TimeRange'}}, F1,
			       [active_period | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{informed_entity := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_EntitySelector(Elem,
					   [informed_entity | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, 'EntitySelector'}},
			       F2, [informed_entity | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{cause := F3} ->
	  'v_enum_Alert.Cause'(F3, [cause | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{effect := F4} ->
	  'v_enum_Alert.Effect'(F4, [effect | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{url := F5} ->
	  v_msg_TranslatedString(F5, [url | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{header_text := F6} ->
	  v_msg_TranslatedString(F6, [header_text | Path],
				 TrUserData);
      _ -> ok
    end,
    case M of
      #{description_text := F7} ->
	  v_msg_TranslatedString(F7, [description_text | Path],
				 TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (active_period) -> ok;
		      (informed_entity) -> ok;
		      (cause) -> ok;
		      (effect) -> ok;
		      (url) -> ok;
		      (header_text) -> ok;
		      (description_text) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Alert(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Alert'},
		  M, Path);
v_msg_Alert(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Alert'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeRange/3}).
-dialyzer({nowarn_function,v_msg_TimeRange/3}).
v_msg_TimeRange(#{} = M, Path, TrUserData) ->
    case M of
      #{start := F1} ->
	  v_type_uint64(F1, [start | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'end' := F2} ->
	  v_type_uint64(F2, ['end' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (start) -> ok;
		      ('end') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TimeRange(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TimeRange'},
		  M, Path);
v_msg_TimeRange(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TimeRange'}, X, Path).

-compile({nowarn_unused_function,v_msg_Position/3}).
-dialyzer({nowarn_function,v_msg_Position/3}).
v_msg_Position(#{latitude := F1, longitude := F2} = M,
	       Path, TrUserData) ->
    v_type_float(F1, [latitude | Path], TrUserData),
    v_type_float(F2, [longitude | Path], TrUserData),
    case M of
      #{bearing := F3} ->
	  v_type_float(F3, [bearing | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{odometer := F4} ->
	  v_type_double(F4, [odometer | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{speed := F5} ->
	  v_type_float(F5, [speed | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (latitude) -> ok;
		      (longitude) -> ok;
		      (bearing) -> ok;
		      (odometer) -> ok;
		      (speed) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Position(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [latitude, longitude] -- maps:keys(M), 'Position'},
		  M, Path);
v_msg_Position(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Position'}, X, Path).

-compile({nowarn_unused_function,v_msg_TripDescriptor/3}).
-dialyzer({nowarn_function,v_msg_TripDescriptor/3}).
v_msg_TripDescriptor(#{} = M, Path, TrUserData) ->
    case M of
      #{trip_id := F1} ->
	  v_type_string(F1, [trip_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{route_id := F2} ->
	  v_type_string(F2, [route_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{direction_id := F3} ->
	  v_type_uint32(F3, [direction_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{start_time := F4} ->
	  v_type_string(F4, [start_time | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{start_date := F5} ->
	  v_type_string(F5, [start_date | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{schedule_relationship := F6} ->
	  'v_enum_TripDescriptor.ScheduleRelationship'(F6,
						       [schedule_relationship
							| Path],
						       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (trip_id) -> ok;
		      (route_id) -> ok;
		      (direction_id) -> ok;
		      (start_time) -> ok;
		      (start_date) -> ok;
		      (schedule_relationship) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TripDescriptor(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TripDescriptor'},
		  M, Path);
v_msg_TripDescriptor(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TripDescriptor'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_VehicleDescriptor/3}).
-dialyzer({nowarn_function,v_msg_VehicleDescriptor/3}).
v_msg_VehicleDescriptor(#{} = M, Path, TrUserData) ->
    case M of
      #{id := F1} ->
	  v_type_string(F1, [id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{label := F2} ->
	  v_type_string(F2, [label | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{license_plate := F3} ->
	  v_type_string(F3, [license_plate | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
		      (label) -> ok;
		      (license_plate) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_VehicleDescriptor(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'VehicleDescriptor'},
		  M, Path);
v_msg_VehicleDescriptor(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'VehicleDescriptor'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_EntitySelector/3}).
-dialyzer({nowarn_function,v_msg_EntitySelector/3}).
v_msg_EntitySelector(#{} = M, Path, TrUserData) ->
    case M of
      #{agency_id := F1} ->
	  v_type_string(F1, [agency_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{route_id := F2} ->
	  v_type_string(F2, [route_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{route_type := F3} ->
	  v_type_int32(F3, [route_type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{trip := F4} ->
	  v_msg_TripDescriptor(F4, [trip | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{stop_id := F5} ->
	  v_type_string(F5, [stop_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (agency_id) -> ok;
		      (route_id) -> ok;
		      (route_type) -> ok;
		      (trip) -> ok;
		      (stop_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_EntitySelector(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'EntitySelector'},
		  M, Path);
v_msg_EntitySelector(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EntitySelector'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_TranslatedString.Translation'/3}).
-dialyzer({nowarn_function,'v_msg_TranslatedString.Translation'/3}).
'v_msg_TranslatedString.Translation'(#{text := F1} = M,
				     Path, TrUserData) ->
    v_type_string(F1, [text | Path], TrUserData),
    case M of
      #{language := F2} ->
	  v_type_string(F2, [language | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (text) -> ok;
		      (language) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_TranslatedString.Translation'(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [text] -- maps:keys(M),
		   'TranslatedString.Translation'},
		  M, Path);
'v_msg_TranslatedString.Translation'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'TranslatedString.Translation'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_TranslatedString/3}).
-dialyzer({nowarn_function,v_msg_TranslatedString/3}).
v_msg_TranslatedString(#{} = M, Path, TrUserData) ->
    case M of
      #{translation := F1} ->
	  if is_list(F1) ->
		 _ = ['v_msg_TranslatedString.Translation'(Elem,
							   [translation | Path],
							   TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, 'TranslatedString.Translation'}},
			       F1, [translation | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (translation) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TranslatedString(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TranslatedString'},
		  M, Path);
v_msg_TranslatedString(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TranslatedString'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_FeedHeader.Incrementality'/3}).
-dialyzer({nowarn_function,'v_enum_FeedHeader.Incrementality'/3}).
'v_enum_FeedHeader.Incrementality'('FULL_DATASET',
				   _Path, _TrUserData) ->
    ok;
'v_enum_FeedHeader.Incrementality'('DIFFERENTIAL',
				   _Path, _TrUserData) ->
    ok;
'v_enum_FeedHeader.Incrementality'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_FeedHeader.Incrementality'(X, Path,
				   _TrUserData) ->
    mk_type_error({invalid_enum,
		   'FeedHeader.Incrementality'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'/3}).
-dialyzer({nowarn_function,'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'/3}).
'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'('SCHEDULED',
							_Path, _TrUserData) ->
    ok;
'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'('SKIPPED',
							_Path, _TrUserData) ->
    ok;
'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'('NO_DATA',
							_Path, _TrUserData) ->
    ok;
'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(V,
							Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_TripUpdate.StopTimeUpdate.ScheduleRelationship'(X,
							Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'TripUpdate.StopTimeUpdate.ScheduleRelationship'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_VehiclePosition.VehicleStopStatus'/3}).
-dialyzer({nowarn_function,'v_enum_VehiclePosition.VehicleStopStatus'/3}).
'v_enum_VehiclePosition.VehicleStopStatus'('INCOMING_AT',
					   _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.VehicleStopStatus'('STOPPED_AT',
					   _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.VehicleStopStatus'('IN_TRANSIT_TO',
					   _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.VehicleStopStatus'(V, Path,
					   TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_VehiclePosition.VehicleStopStatus'(X, Path,
					   _TrUserData) ->
    mk_type_error({invalid_enum,
		   'VehiclePosition.VehicleStopStatus'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_VehiclePosition.CongestionLevel'/3}).
-dialyzer({nowarn_function,'v_enum_VehiclePosition.CongestionLevel'/3}).
'v_enum_VehiclePosition.CongestionLevel'('UNKNOWN_CONGESTION_LEVEL',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.CongestionLevel'('RUNNING_SMOOTHLY',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.CongestionLevel'('STOP_AND_GO',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.CongestionLevel'('CONGESTION',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.CongestionLevel'('SEVERE_CONGESTION',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.CongestionLevel'(V, Path,
					 TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_VehiclePosition.CongestionLevel'(X, Path,
					 _TrUserData) ->
    mk_type_error({invalid_enum,
		   'VehiclePosition.CongestionLevel'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_VehiclePosition.OccupancyStatus'/3}).
-dialyzer({nowarn_function,'v_enum_VehiclePosition.OccupancyStatus'/3}).
'v_enum_VehiclePosition.OccupancyStatus'('EMPTY', _Path,
					 _TrUserData) ->
    ok;
'v_enum_VehiclePosition.OccupancyStatus'('MANY_SEATS_AVAILABLE',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.OccupancyStatus'('FEW_SEATS_AVAILABLE',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.OccupancyStatus'('STANDING_ROOM_ONLY',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.OccupancyStatus'('CRUSHED_STANDING_ROOM_ONLY',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.OccupancyStatus'('FULL', _Path,
					 _TrUserData) ->
    ok;
'v_enum_VehiclePosition.OccupancyStatus'('NOT_ACCEPTING_PASSENGERS',
					 _Path, _TrUserData) ->
    ok;
'v_enum_VehiclePosition.OccupancyStatus'(V, Path,
					 TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_VehiclePosition.OccupancyStatus'(X, Path,
					 _TrUserData) ->
    mk_type_error({invalid_enum,
		   'VehiclePosition.OccupancyStatus'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_Alert.Cause'/3}).
-dialyzer({nowarn_function,'v_enum_Alert.Cause'/3}).
'v_enum_Alert.Cause'('UNKNOWN_CAUSE', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('OTHER_CAUSE', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('TECHNICAL_PROBLEM', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('STRIKE', _Path, _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('DEMONSTRATION', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('ACCIDENT', _Path, _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('HOLIDAY', _Path, _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('WEATHER', _Path, _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('MAINTENANCE', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('CONSTRUCTION', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('POLICE_ACTIVITY', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'('MEDICAL_EMERGENCY', _Path,
		     _TrUserData) ->
    ok;
'v_enum_Alert.Cause'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Alert.Cause'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Alert.Cause'}, X, Path).

-compile({nowarn_unused_function,'v_enum_Alert.Effect'/3}).
-dialyzer({nowarn_function,'v_enum_Alert.Effect'/3}).
'v_enum_Alert.Effect'('NO_SERVICE', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('REDUCED_SERVICE', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('SIGNIFICANT_DELAYS', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('DETOUR', _Path, _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('ADDITIONAL_SERVICE', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('MODIFIED_SERVICE', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('OTHER_EFFECT', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('UNKNOWN_EFFECT', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'('STOP_MOVED', _Path,
		      _TrUserData) ->
    ok;
'v_enum_Alert.Effect'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Alert.Effect'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Alert.Effect'}, X, Path).

-compile({nowarn_unused_function,'v_enum_TripDescriptor.ScheduleRelationship'/3}).
-dialyzer({nowarn_function,'v_enum_TripDescriptor.ScheduleRelationship'/3}).
'v_enum_TripDescriptor.ScheduleRelationship'('SCHEDULED',
					     _Path, _TrUserData) ->
    ok;
'v_enum_TripDescriptor.ScheduleRelationship'('ADDED',
					     _Path, _TrUserData) ->
    ok;
'v_enum_TripDescriptor.ScheduleRelationship'('UNSCHEDULED',
					     _Path, _TrUserData) ->
    ok;
'v_enum_TripDescriptor.ScheduleRelationship'('CANCELED',
					     _Path, _TrUserData) ->
    ok;
'v_enum_TripDescriptor.ScheduleRelationship'(V, Path,
					     TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_TripDescriptor.ScheduleRelationship'(X, Path,
					     _TrUserData) ->
    mk_type_error({invalid_enum,
		   'TripDescriptor.ScheduleRelationship'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'FeedHeader.Incrementality'},
      [{'FULL_DATASET', 0}, {'DIFFERENTIAL', 1}]},
     {{enum,
       'TripUpdate.StopTimeUpdate.ScheduleRelationship'},
      [{'SCHEDULED', 0}, {'SKIPPED', 1}, {'NO_DATA', 2}]},
     {{enum, 'VehiclePosition.VehicleStopStatus'},
      [{'INCOMING_AT', 0}, {'STOPPED_AT', 1},
       {'IN_TRANSIT_TO', 2}]},
     {{enum, 'VehiclePosition.CongestionLevel'},
      [{'UNKNOWN_CONGESTION_LEVEL', 0},
       {'RUNNING_SMOOTHLY', 1}, {'STOP_AND_GO', 2},
       {'CONGESTION', 3}, {'SEVERE_CONGESTION', 4}]},
     {{enum, 'VehiclePosition.OccupancyStatus'},
      [{'EMPTY', 0}, {'MANY_SEATS_AVAILABLE', 1},
       {'FEW_SEATS_AVAILABLE', 2}, {'STANDING_ROOM_ONLY', 3},
       {'CRUSHED_STANDING_ROOM_ONLY', 4}, {'FULL', 5},
       {'NOT_ACCEPTING_PASSENGERS', 6}]},
     {{enum, 'Alert.Cause'},
      [{'UNKNOWN_CAUSE', 1}, {'OTHER_CAUSE', 2},
       {'TECHNICAL_PROBLEM', 3}, {'STRIKE', 4},
       {'DEMONSTRATION', 5}, {'ACCIDENT', 6}, {'HOLIDAY', 7},
       {'WEATHER', 8}, {'MAINTENANCE', 9},
       {'CONSTRUCTION', 10}, {'POLICE_ACTIVITY', 11},
       {'MEDICAL_EMERGENCY', 12}]},
     {{enum, 'Alert.Effect'},
      [{'NO_SERVICE', 1}, {'REDUCED_SERVICE', 2},
       {'SIGNIFICANT_DELAYS', 3}, {'DETOUR', 4},
       {'ADDITIONAL_SERVICE', 5}, {'MODIFIED_SERVICE', 6},
       {'OTHER_EFFECT', 7}, {'UNKNOWN_EFFECT', 8},
       {'STOP_MOVED', 9}]},
     {{enum, 'TripDescriptor.ScheduleRelationship'},
      [{'SCHEDULED', 0}, {'ADDED', 1}, {'UNSCHEDULED', 2},
       {'CANCELED', 3}]},
     {{msg, 'FeedMessage'},
      [[{name, header}, {fnum, 1}, {rnum, 2},
	{type, {msg, 'FeedHeader'}}, {occurrence, required},
	{opts, []}],
       [{name, entity}, {fnum, 2}, {rnum, 3},
	{type, {msg, 'FeedEntity'}}, {occurrence, repeated},
	{opts, []}]]},
     {{msg, 'FeedHeader'},
      [[{name, gtfs_realtime_version}, {fnum, 1}, {rnum, 2},
	{type, string}, {occurrence, required}, {opts, []}],
       [{name, incrementality}, {fnum, 2}, {rnum, 3},
	{type, {enum, 'FeedHeader.Incrementality'}},
	{occurrence, optional},
	{opts, [{default, 'FULL_DATASET'}]}],
       [{name, timestamp}, {fnum, 3}, {rnum, 4},
	{type, uint64}, {occurrence, optional}, {opts, []}]]},
     {{msg, 'FeedEntity'},
      [[{name, id}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, required}, {opts, []}],
       [{name, is_deleted}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, [{default, false}]}],
       [{name, trip_update}, {fnum, 3}, {rnum, 4},
	{type, {msg, 'TripUpdate'}}, {occurrence, optional},
	{opts, []}],
       [{name, vehicle}, {fnum, 4}, {rnum, 5},
	{type, {msg, 'VehiclePosition'}},
	{occurrence, optional}, {opts, []}],
       [{name, alert}, {fnum, 5}, {rnum, 6},
	{type, {msg, 'Alert'}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, 'TripUpdate.StopTimeEvent'},
      [[{name, delay}, {fnum, 1}, {rnum, 2}, {type, int32},
	{occurrence, optional}, {opts, []}],
       [{name, time}, {fnum, 2}, {rnum, 3}, {type, int64},
	{occurrence, optional}, {opts, []}],
       [{name, uncertainty}, {fnum, 3}, {rnum, 4},
	{type, int32}, {occurrence, optional}, {opts, []}]]},
     {{msg, 'TripUpdate.StopTimeUpdate'},
      [[{name, stop_sequence}, {fnum, 1}, {rnum, 2},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, stop_id}, {fnum, 4}, {rnum, 3}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, arrival}, {fnum, 2}, {rnum, 4},
	{type, {msg, 'TripUpdate.StopTimeEvent'}},
	{occurrence, optional}, {opts, []}],
       [{name, departure}, {fnum, 3}, {rnum, 5},
	{type, {msg, 'TripUpdate.StopTimeEvent'}},
	{occurrence, optional}, {opts, []}],
       [{name, schedule_relationship}, {fnum, 5}, {rnum, 6},
	{type,
	 {enum,
	  'TripUpdate.StopTimeUpdate.ScheduleRelationship'}},
	{occurrence, optional},
	{opts, [{default, 'SCHEDULED'}]}]]},
     {{msg, 'TripUpdate'},
      [[{name, trip}, {fnum, 1}, {rnum, 2},
	{type, {msg, 'TripDescriptor'}}, {occurrence, required},
	{opts, []}],
       [{name, vehicle}, {fnum, 3}, {rnum, 3},
	{type, {msg, 'VehicleDescriptor'}},
	{occurrence, optional}, {opts, []}],
       [{name, stop_time_update}, {fnum, 2}, {rnum, 4},
	{type, {msg, 'TripUpdate.StopTimeUpdate'}},
	{occurrence, repeated}, {opts, []}],
       [{name, timestamp}, {fnum, 4}, {rnum, 5},
	{type, uint64}, {occurrence, optional}, {opts, []}],
       [{name, delay}, {fnum, 5}, {rnum, 6}, {type, int32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'VehiclePosition'},
      [[{name, trip}, {fnum, 1}, {rnum, 2},
	{type, {msg, 'TripDescriptor'}}, {occurrence, optional},
	{opts, []}],
       [{name, vehicle}, {fnum, 8}, {rnum, 3},
	{type, {msg, 'VehicleDescriptor'}},
	{occurrence, optional}, {opts, []}],
       [{name, position}, {fnum, 2}, {rnum, 4},
	{type, {msg, 'Position'}}, {occurrence, optional},
	{opts, []}],
       [{name, current_stop_sequence}, {fnum, 3}, {rnum, 5},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, stop_id}, {fnum, 7}, {rnum, 6}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, current_status}, {fnum, 4}, {rnum, 7},
	{type, {enum, 'VehiclePosition.VehicleStopStatus'}},
	{occurrence, optional},
	{opts, [{default, 'IN_TRANSIT_TO'}]}],
       [{name, timestamp}, {fnum, 5}, {rnum, 8},
	{type, uint64}, {occurrence, optional}, {opts, []}],
       [{name, congestion_level}, {fnum, 6}, {rnum, 9},
	{type, {enum, 'VehiclePosition.CongestionLevel'}},
	{occurrence, optional}, {opts, []}],
       [{name, occupancy_status}, {fnum, 9}, {rnum, 10},
	{type, {enum, 'VehiclePosition.OccupancyStatus'}},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'Alert'},
      [[{name, active_period}, {fnum, 1}, {rnum, 2},
	{type, {msg, 'TimeRange'}}, {occurrence, repeated},
	{opts, []}],
       [{name, informed_entity}, {fnum, 5}, {rnum, 3},
	{type, {msg, 'EntitySelector'}}, {occurrence, repeated},
	{opts, []}],
       [{name, cause}, {fnum, 6}, {rnum, 4},
	{type, {enum, 'Alert.Cause'}}, {occurrence, optional},
	{opts, [{default, 'UNKNOWN_CAUSE'}]}],
       [{name, effect}, {fnum, 7}, {rnum, 5},
	{type, {enum, 'Alert.Effect'}}, {occurrence, optional},
	{opts, [{default, 'UNKNOWN_EFFECT'}]}],
       [{name, url}, {fnum, 8}, {rnum, 6},
	{type, {msg, 'TranslatedString'}},
	{occurrence, optional}, {opts, []}],
       [{name, header_text}, {fnum, 10}, {rnum, 7},
	{type, {msg, 'TranslatedString'}},
	{occurrence, optional}, {opts, []}],
       [{name, description_text}, {fnum, 11}, {rnum, 8},
	{type, {msg, 'TranslatedString'}},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'TimeRange'},
      [[{name, start}, {fnum, 1}, {rnum, 2}, {type, uint64},
	{occurrence, optional}, {opts, []}],
       [{name, 'end'}, {fnum, 2}, {rnum, 3}, {type, uint64},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'Position'},
      [[{name, latitude}, {fnum, 1}, {rnum, 2}, {type, float},
	{occurrence, required}, {opts, []}],
       [{name, longitude}, {fnum, 2}, {rnum, 3}, {type, float},
	{occurrence, required}, {opts, []}],
       [{name, bearing}, {fnum, 3}, {rnum, 4}, {type, float},
	{occurrence, optional}, {opts, []}],
       [{name, odometer}, {fnum, 4}, {rnum, 5}, {type, double},
	{occurrence, optional}, {opts, []}],
       [{name, speed}, {fnum, 5}, {rnum, 6}, {type, float},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'TripDescriptor'},
      [[{name, trip_id}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, route_id}, {fnum, 5}, {rnum, 3}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, direction_id}, {fnum, 6}, {rnum, 4},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, start_time}, {fnum, 2}, {rnum, 5},
	{type, string}, {occurrence, optional}, {opts, []}],
       [{name, start_date}, {fnum, 3}, {rnum, 6},
	{type, string}, {occurrence, optional}, {opts, []}],
       [{name, schedule_relationship}, {fnum, 4}, {rnum, 7},
	{type, {enum, 'TripDescriptor.ScheduleRelationship'}},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'VehicleDescriptor'},
      [[{name, id}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, label}, {fnum, 2}, {rnum, 3}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, license_plate}, {fnum, 3}, {rnum, 4},
	{type, string}, {occurrence, optional}, {opts, []}]]},
     {{msg, 'EntitySelector'},
      [[{name, agency_id}, {fnum, 1}, {rnum, 2},
	{type, string}, {occurrence, optional}, {opts, []}],
       [{name, route_id}, {fnum, 2}, {rnum, 3}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, route_type}, {fnum, 3}, {rnum, 4},
	{type, int32}, {occurrence, optional}, {opts, []}],
       [{name, trip}, {fnum, 4}, {rnum, 5},
	{type, {msg, 'TripDescriptor'}}, {occurrence, optional},
	{opts, []}],
       [{name, stop_id}, {fnum, 5}, {rnum, 6}, {type, string},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'TranslatedString.Translation'},
      [[{name, text}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, required}, {opts, []}],
       [{name, language}, {fnum, 2}, {rnum, 3}, {type, string},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'TranslatedString'},
      [[{name, translation}, {fnum, 1}, {rnum, 2},
	{type, {msg, 'TranslatedString.Translation'}},
	{occurrence, repeated}, {opts, []}]]}].


get_msg_names() ->
    ['FeedMessage', 'FeedHeader', 'FeedEntity',
     'TripUpdate.StopTimeEvent', 'TripUpdate.StopTimeUpdate',
     'TripUpdate', 'VehiclePosition', 'Alert', 'TimeRange',
     'Position', 'TripDescriptor', 'VehicleDescriptor',
     'EntitySelector', 'TranslatedString.Translation',
     'TranslatedString'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['FeedMessage', 'FeedHeader', 'FeedEntity',
     'TripUpdate.StopTimeEvent', 'TripUpdate.StopTimeUpdate',
     'TripUpdate', 'VehiclePosition', 'Alert', 'TimeRange',
     'Position', 'TripDescriptor', 'VehicleDescriptor',
     'EntitySelector', 'TranslatedString.Translation',
     'TranslatedString'].


get_enum_names() ->
    ['FeedHeader.Incrementality',
     'TripUpdate.StopTimeUpdate.ScheduleRelationship',
     'VehiclePosition.VehicleStopStatus',
     'VehiclePosition.CongestionLevel',
     'VehiclePosition.OccupancyStatus', 'Alert.Cause',
     'Alert.Effect', 'TripDescriptor.ScheduleRelationship'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('FeedMessage') ->
    [[{name, header}, {fnum, 1}, {rnum, 2},
      {type, {msg, 'FeedHeader'}}, {occurrence, required},
      {opts, []}],
     [{name, entity}, {fnum, 2}, {rnum, 3},
      {type, {msg, 'FeedEntity'}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def('FeedHeader') ->
    [[{name, gtfs_realtime_version}, {fnum, 1}, {rnum, 2},
      {type, string}, {occurrence, required}, {opts, []}],
     [{name, incrementality}, {fnum, 2}, {rnum, 3},
      {type, {enum, 'FeedHeader.Incrementality'}},
      {occurrence, optional},
      {opts, [{default, 'FULL_DATASET'}]}],
     [{name, timestamp}, {fnum, 3}, {rnum, 4},
      {type, uint64}, {occurrence, optional}, {opts, []}]];
find_msg_def('FeedEntity') ->
    [[{name, id}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, required}, {opts, []}],
     [{name, is_deleted}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, [{default, false}]}],
     [{name, trip_update}, {fnum, 3}, {rnum, 4},
      {type, {msg, 'TripUpdate'}}, {occurrence, optional},
      {opts, []}],
     [{name, vehicle}, {fnum, 4}, {rnum, 5},
      {type, {msg, 'VehiclePosition'}},
      {occurrence, optional}, {opts, []}],
     [{name, alert}, {fnum, 5}, {rnum, 6},
      {type, {msg, 'Alert'}}, {occurrence, optional},
      {opts, []}]];
find_msg_def('TripUpdate.StopTimeEvent') ->
    [[{name, delay}, {fnum, 1}, {rnum, 2}, {type, int32},
      {occurrence, optional}, {opts, []}],
     [{name, time}, {fnum, 2}, {rnum, 3}, {type, int64},
      {occurrence, optional}, {opts, []}],
     [{name, uncertainty}, {fnum, 3}, {rnum, 4},
      {type, int32}, {occurrence, optional}, {opts, []}]];
find_msg_def('TripUpdate.StopTimeUpdate') ->
    [[{name, stop_sequence}, {fnum, 1}, {rnum, 2},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, stop_id}, {fnum, 4}, {rnum, 3}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, arrival}, {fnum, 2}, {rnum, 4},
      {type, {msg, 'TripUpdate.StopTimeEvent'}},
      {occurrence, optional}, {opts, []}],
     [{name, departure}, {fnum, 3}, {rnum, 5},
      {type, {msg, 'TripUpdate.StopTimeEvent'}},
      {occurrence, optional}, {opts, []}],
     [{name, schedule_relationship}, {fnum, 5}, {rnum, 6},
      {type,
       {enum,
	'TripUpdate.StopTimeUpdate.ScheduleRelationship'}},
      {occurrence, optional},
      {opts, [{default, 'SCHEDULED'}]}]];
find_msg_def('TripUpdate') ->
    [[{name, trip}, {fnum, 1}, {rnum, 2},
      {type, {msg, 'TripDescriptor'}}, {occurrence, required},
      {opts, []}],
     [{name, vehicle}, {fnum, 3}, {rnum, 3},
      {type, {msg, 'VehicleDescriptor'}},
      {occurrence, optional}, {opts, []}],
     [{name, stop_time_update}, {fnum, 2}, {rnum, 4},
      {type, {msg, 'TripUpdate.StopTimeUpdate'}},
      {occurrence, repeated}, {opts, []}],
     [{name, timestamp}, {fnum, 4}, {rnum, 5},
      {type, uint64}, {occurrence, optional}, {opts, []}],
     [{name, delay}, {fnum, 5}, {rnum, 6}, {type, int32},
      {occurrence, optional}, {opts, []}]];
find_msg_def('VehiclePosition') ->
    [[{name, trip}, {fnum, 1}, {rnum, 2},
      {type, {msg, 'TripDescriptor'}}, {occurrence, optional},
      {opts, []}],
     [{name, vehicle}, {fnum, 8}, {rnum, 3},
      {type, {msg, 'VehicleDescriptor'}},
      {occurrence, optional}, {opts, []}],
     [{name, position}, {fnum, 2}, {rnum, 4},
      {type, {msg, 'Position'}}, {occurrence, optional},
      {opts, []}],
     [{name, current_stop_sequence}, {fnum, 3}, {rnum, 5},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, stop_id}, {fnum, 7}, {rnum, 6}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, current_status}, {fnum, 4}, {rnum, 7},
      {type, {enum, 'VehiclePosition.VehicleStopStatus'}},
      {occurrence, optional},
      {opts, [{default, 'IN_TRANSIT_TO'}]}],
     [{name, timestamp}, {fnum, 5}, {rnum, 8},
      {type, uint64}, {occurrence, optional}, {opts, []}],
     [{name, congestion_level}, {fnum, 6}, {rnum, 9},
      {type, {enum, 'VehiclePosition.CongestionLevel'}},
      {occurrence, optional}, {opts, []}],
     [{name, occupancy_status}, {fnum, 9}, {rnum, 10},
      {type, {enum, 'VehiclePosition.OccupancyStatus'}},
      {occurrence, optional}, {opts, []}]];
find_msg_def('Alert') ->
    [[{name, active_period}, {fnum, 1}, {rnum, 2},
      {type, {msg, 'TimeRange'}}, {occurrence, repeated},
      {opts, []}],
     [{name, informed_entity}, {fnum, 5}, {rnum, 3},
      {type, {msg, 'EntitySelector'}}, {occurrence, repeated},
      {opts, []}],
     [{name, cause}, {fnum, 6}, {rnum, 4},
      {type, {enum, 'Alert.Cause'}}, {occurrence, optional},
      {opts, [{default, 'UNKNOWN_CAUSE'}]}],
     [{name, effect}, {fnum, 7}, {rnum, 5},
      {type, {enum, 'Alert.Effect'}}, {occurrence, optional},
      {opts, [{default, 'UNKNOWN_EFFECT'}]}],
     [{name, url}, {fnum, 8}, {rnum, 6},
      {type, {msg, 'TranslatedString'}},
      {occurrence, optional}, {opts, []}],
     [{name, header_text}, {fnum, 10}, {rnum, 7},
      {type, {msg, 'TranslatedString'}},
      {occurrence, optional}, {opts, []}],
     [{name, description_text}, {fnum, 11}, {rnum, 8},
      {type, {msg, 'TranslatedString'}},
      {occurrence, optional}, {opts, []}]];
find_msg_def('TimeRange') ->
    [[{name, start}, {fnum, 1}, {rnum, 2}, {type, uint64},
      {occurrence, optional}, {opts, []}],
     [{name, 'end'}, {fnum, 2}, {rnum, 3}, {type, uint64},
      {occurrence, optional}, {opts, []}]];
find_msg_def('Position') ->
    [[{name, latitude}, {fnum, 1}, {rnum, 2}, {type, float},
      {occurrence, required}, {opts, []}],
     [{name, longitude}, {fnum, 2}, {rnum, 3}, {type, float},
      {occurrence, required}, {opts, []}],
     [{name, bearing}, {fnum, 3}, {rnum, 4}, {type, float},
      {occurrence, optional}, {opts, []}],
     [{name, odometer}, {fnum, 4}, {rnum, 5}, {type, double},
      {occurrence, optional}, {opts, []}],
     [{name, speed}, {fnum, 5}, {rnum, 6}, {type, float},
      {occurrence, optional}, {opts, []}]];
find_msg_def('TripDescriptor') ->
    [[{name, trip_id}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, route_id}, {fnum, 5}, {rnum, 3}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, direction_id}, {fnum, 6}, {rnum, 4},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, start_time}, {fnum, 2}, {rnum, 5},
      {type, string}, {occurrence, optional}, {opts, []}],
     [{name, start_date}, {fnum, 3}, {rnum, 6},
      {type, string}, {occurrence, optional}, {opts, []}],
     [{name, schedule_relationship}, {fnum, 4}, {rnum, 7},
      {type, {enum, 'TripDescriptor.ScheduleRelationship'}},
      {occurrence, optional}, {opts, []}]];
find_msg_def('VehicleDescriptor') ->
    [[{name, id}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, label}, {fnum, 2}, {rnum, 3}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, license_plate}, {fnum, 3}, {rnum, 4},
      {type, string}, {occurrence, optional}, {opts, []}]];
find_msg_def('EntitySelector') ->
    [[{name, agency_id}, {fnum, 1}, {rnum, 2},
      {type, string}, {occurrence, optional}, {opts, []}],
     [{name, route_id}, {fnum, 2}, {rnum, 3}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, route_type}, {fnum, 3}, {rnum, 4},
      {type, int32}, {occurrence, optional}, {opts, []}],
     [{name, trip}, {fnum, 4}, {rnum, 5},
      {type, {msg, 'TripDescriptor'}}, {occurrence, optional},
      {opts, []}],
     [{name, stop_id}, {fnum, 5}, {rnum, 6}, {type, string},
      {occurrence, optional}, {opts, []}]];
find_msg_def('TranslatedString.Translation') ->
    [[{name, text}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, required}, {opts, []}],
     [{name, language}, {fnum, 2}, {rnum, 3}, {type, string},
      {occurrence, optional}, {opts, []}]];
find_msg_def('TranslatedString') ->
    [[{name, translation}, {fnum, 1}, {rnum, 2},
      {type, {msg, 'TranslatedString.Translation'}},
      {occurrence, repeated}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('FeedHeader.Incrementality') ->
    [{'FULL_DATASET', 0}, {'DIFFERENTIAL', 1}];
find_enum_def('TripUpdate.StopTimeUpdate.ScheduleRelationship') ->
    [{'SCHEDULED', 0}, {'SKIPPED', 1}, {'NO_DATA', 2}];
find_enum_def('VehiclePosition.VehicleStopStatus') ->
    [{'INCOMING_AT', 0}, {'STOPPED_AT', 1},
     {'IN_TRANSIT_TO', 2}];
find_enum_def('VehiclePosition.CongestionLevel') ->
    [{'UNKNOWN_CONGESTION_LEVEL', 0},
     {'RUNNING_SMOOTHLY', 1}, {'STOP_AND_GO', 2},
     {'CONGESTION', 3}, {'SEVERE_CONGESTION', 4}];
find_enum_def('VehiclePosition.OccupancyStatus') ->
    [{'EMPTY', 0}, {'MANY_SEATS_AVAILABLE', 1},
     {'FEW_SEATS_AVAILABLE', 2}, {'STANDING_ROOM_ONLY', 3},
     {'CRUSHED_STANDING_ROOM_ONLY', 4}, {'FULL', 5},
     {'NOT_ACCEPTING_PASSENGERS', 6}];
find_enum_def('Alert.Cause') ->
    [{'UNKNOWN_CAUSE', 1}, {'OTHER_CAUSE', 2},
     {'TECHNICAL_PROBLEM', 3}, {'STRIKE', 4},
     {'DEMONSTRATION', 5}, {'ACCIDENT', 6}, {'HOLIDAY', 7},
     {'WEATHER', 8}, {'MAINTENANCE', 9},
     {'CONSTRUCTION', 10}, {'POLICE_ACTIVITY', 11},
     {'MEDICAL_EMERGENCY', 12}];
find_enum_def('Alert.Effect') ->
    [{'NO_SERVICE', 1}, {'REDUCED_SERVICE', 2},
     {'SIGNIFICANT_DELAYS', 3}, {'DETOUR', 4},
     {'ADDITIONAL_SERVICE', 5}, {'MODIFIED_SERVICE', 6},
     {'OTHER_EFFECT', 7}, {'UNKNOWN_EFFECT', 8},
     {'STOP_MOVED', 9}];
find_enum_def('TripDescriptor.ScheduleRelationship') ->
    [{'SCHEDULED', 0}, {'ADDED', 1}, {'UNSCHEDULED', 2},
     {'CANCELED', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('FeedHeader.Incrementality',
		     Value) ->
    'enum_symbol_by_value_FeedHeader.Incrementality'(Value);
enum_symbol_by_value('TripUpdate.StopTimeUpdate.ScheduleRelationship',
		     Value) ->
    'enum_symbol_by_value_TripUpdate.StopTimeUpdate.ScheduleRelationship'(Value);
enum_symbol_by_value('VehiclePosition.VehicleStopStatus',
		     Value) ->
    'enum_symbol_by_value_VehiclePosition.VehicleStopStatus'(Value);
enum_symbol_by_value('VehiclePosition.CongestionLevel',
		     Value) ->
    'enum_symbol_by_value_VehiclePosition.CongestionLevel'(Value);
enum_symbol_by_value('VehiclePosition.OccupancyStatus',
		     Value) ->
    'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(Value);
enum_symbol_by_value('Alert.Cause', Value) ->
    'enum_symbol_by_value_Alert.Cause'(Value);
enum_symbol_by_value('Alert.Effect', Value) ->
    'enum_symbol_by_value_Alert.Effect'(Value);
enum_symbol_by_value('TripDescriptor.ScheduleRelationship',
		     Value) ->
    'enum_symbol_by_value_TripDescriptor.ScheduleRelationship'(Value).


enum_value_by_symbol('FeedHeader.Incrementality',
		     Sym) ->
    'enum_value_by_symbol_FeedHeader.Incrementality'(Sym);
enum_value_by_symbol('TripUpdate.StopTimeUpdate.ScheduleRelationship',
		     Sym) ->
    'enum_value_by_symbol_TripUpdate.StopTimeUpdate.ScheduleRelationship'(Sym);
enum_value_by_symbol('VehiclePosition.VehicleStopStatus',
		     Sym) ->
    'enum_value_by_symbol_VehiclePosition.VehicleStopStatus'(Sym);
enum_value_by_symbol('VehiclePosition.CongestionLevel',
		     Sym) ->
    'enum_value_by_symbol_VehiclePosition.CongestionLevel'(Sym);
enum_value_by_symbol('VehiclePosition.OccupancyStatus',
		     Sym) ->
    'enum_value_by_symbol_VehiclePosition.OccupancyStatus'(Sym);
enum_value_by_symbol('Alert.Cause', Sym) ->
    'enum_value_by_symbol_Alert.Cause'(Sym);
enum_value_by_symbol('Alert.Effect', Sym) ->
    'enum_value_by_symbol_Alert.Effect'(Sym);
enum_value_by_symbol('TripDescriptor.ScheduleRelationship',
		     Sym) ->
    'enum_value_by_symbol_TripDescriptor.ScheduleRelationship'(Sym).


'enum_symbol_by_value_FeedHeader.Incrementality'(0) ->
    'FULL_DATASET';
'enum_symbol_by_value_FeedHeader.Incrementality'(1) ->
    'DIFFERENTIAL'.


'enum_value_by_symbol_FeedHeader.Incrementality'('FULL_DATASET') ->
    0;
'enum_value_by_symbol_FeedHeader.Incrementality'('DIFFERENTIAL') ->
    1.

'enum_symbol_by_value_TripUpdate.StopTimeUpdate.ScheduleRelationship'(0) ->
    'SCHEDULED';
'enum_symbol_by_value_TripUpdate.StopTimeUpdate.ScheduleRelationship'(1) ->
    'SKIPPED';
'enum_symbol_by_value_TripUpdate.StopTimeUpdate.ScheduleRelationship'(2) ->
    'NO_DATA'.


'enum_value_by_symbol_TripUpdate.StopTimeUpdate.ScheduleRelationship'('SCHEDULED') ->
    0;
'enum_value_by_symbol_TripUpdate.StopTimeUpdate.ScheduleRelationship'('SKIPPED') ->
    1;
'enum_value_by_symbol_TripUpdate.StopTimeUpdate.ScheduleRelationship'('NO_DATA') ->
    2.

'enum_symbol_by_value_VehiclePosition.VehicleStopStatus'(0) ->
    'INCOMING_AT';
'enum_symbol_by_value_VehiclePosition.VehicleStopStatus'(1) ->
    'STOPPED_AT';
'enum_symbol_by_value_VehiclePosition.VehicleStopStatus'(2) ->
    'IN_TRANSIT_TO'.


'enum_value_by_symbol_VehiclePosition.VehicleStopStatus'('INCOMING_AT') ->
    0;
'enum_value_by_symbol_VehiclePosition.VehicleStopStatus'('STOPPED_AT') ->
    1;
'enum_value_by_symbol_VehiclePosition.VehicleStopStatus'('IN_TRANSIT_TO') ->
    2.

'enum_symbol_by_value_VehiclePosition.CongestionLevel'(0) ->
    'UNKNOWN_CONGESTION_LEVEL';
'enum_symbol_by_value_VehiclePosition.CongestionLevel'(1) ->
    'RUNNING_SMOOTHLY';
'enum_symbol_by_value_VehiclePosition.CongestionLevel'(2) ->
    'STOP_AND_GO';
'enum_symbol_by_value_VehiclePosition.CongestionLevel'(3) ->
    'CONGESTION';
'enum_symbol_by_value_VehiclePosition.CongestionLevel'(4) ->
    'SEVERE_CONGESTION'.


'enum_value_by_symbol_VehiclePosition.CongestionLevel'('UNKNOWN_CONGESTION_LEVEL') ->
    0;
'enum_value_by_symbol_VehiclePosition.CongestionLevel'('RUNNING_SMOOTHLY') ->
    1;
'enum_value_by_symbol_VehiclePosition.CongestionLevel'('STOP_AND_GO') ->
    2;
'enum_value_by_symbol_VehiclePosition.CongestionLevel'('CONGESTION') ->
    3;
'enum_value_by_symbol_VehiclePosition.CongestionLevel'('SEVERE_CONGESTION') ->
    4.

'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(0) ->
    'EMPTY';
'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(1) ->
    'MANY_SEATS_AVAILABLE';
'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(2) ->
    'FEW_SEATS_AVAILABLE';
'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(3) ->
    'STANDING_ROOM_ONLY';
'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(4) ->
    'CRUSHED_STANDING_ROOM_ONLY';
'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(5) ->
    'FULL';
'enum_symbol_by_value_VehiclePosition.OccupancyStatus'(6) ->
    'NOT_ACCEPTING_PASSENGERS'.


'enum_value_by_symbol_VehiclePosition.OccupancyStatus'('EMPTY') ->
    0;
'enum_value_by_symbol_VehiclePosition.OccupancyStatus'('MANY_SEATS_AVAILABLE') ->
    1;
'enum_value_by_symbol_VehiclePosition.OccupancyStatus'('FEW_SEATS_AVAILABLE') ->
    2;
'enum_value_by_symbol_VehiclePosition.OccupancyStatus'('STANDING_ROOM_ONLY') ->
    3;
'enum_value_by_symbol_VehiclePosition.OccupancyStatus'('CRUSHED_STANDING_ROOM_ONLY') ->
    4;
'enum_value_by_symbol_VehiclePosition.OccupancyStatus'('FULL') ->
    5;
'enum_value_by_symbol_VehiclePosition.OccupancyStatus'('NOT_ACCEPTING_PASSENGERS') ->
    6.

'enum_symbol_by_value_Alert.Cause'(1) ->
    'UNKNOWN_CAUSE';
'enum_symbol_by_value_Alert.Cause'(2) -> 'OTHER_CAUSE';
'enum_symbol_by_value_Alert.Cause'(3) ->
    'TECHNICAL_PROBLEM';
'enum_symbol_by_value_Alert.Cause'(4) -> 'STRIKE';
'enum_symbol_by_value_Alert.Cause'(5) ->
    'DEMONSTRATION';
'enum_symbol_by_value_Alert.Cause'(6) -> 'ACCIDENT';
'enum_symbol_by_value_Alert.Cause'(7) -> 'HOLIDAY';
'enum_symbol_by_value_Alert.Cause'(8) -> 'WEATHER';
'enum_symbol_by_value_Alert.Cause'(9) -> 'MAINTENANCE';
'enum_symbol_by_value_Alert.Cause'(10) ->
    'CONSTRUCTION';
'enum_symbol_by_value_Alert.Cause'(11) ->
    'POLICE_ACTIVITY';
'enum_symbol_by_value_Alert.Cause'(12) ->
    'MEDICAL_EMERGENCY'.


'enum_value_by_symbol_Alert.Cause'('UNKNOWN_CAUSE') ->
    1;
'enum_value_by_symbol_Alert.Cause'('OTHER_CAUSE') -> 2;
'enum_value_by_symbol_Alert.Cause'('TECHNICAL_PROBLEM') ->
    3;
'enum_value_by_symbol_Alert.Cause'('STRIKE') -> 4;
'enum_value_by_symbol_Alert.Cause'('DEMONSTRATION') ->
    5;
'enum_value_by_symbol_Alert.Cause'('ACCIDENT') -> 6;
'enum_value_by_symbol_Alert.Cause'('HOLIDAY') -> 7;
'enum_value_by_symbol_Alert.Cause'('WEATHER') -> 8;
'enum_value_by_symbol_Alert.Cause'('MAINTENANCE') -> 9;
'enum_value_by_symbol_Alert.Cause'('CONSTRUCTION') ->
    10;
'enum_value_by_symbol_Alert.Cause'('POLICE_ACTIVITY') ->
    11;
'enum_value_by_symbol_Alert.Cause'('MEDICAL_EMERGENCY') ->
    12.

'enum_symbol_by_value_Alert.Effect'(1) -> 'NO_SERVICE';
'enum_symbol_by_value_Alert.Effect'(2) ->
    'REDUCED_SERVICE';
'enum_symbol_by_value_Alert.Effect'(3) ->
    'SIGNIFICANT_DELAYS';
'enum_symbol_by_value_Alert.Effect'(4) -> 'DETOUR';
'enum_symbol_by_value_Alert.Effect'(5) ->
    'ADDITIONAL_SERVICE';
'enum_symbol_by_value_Alert.Effect'(6) ->
    'MODIFIED_SERVICE';
'enum_symbol_by_value_Alert.Effect'(7) ->
    'OTHER_EFFECT';
'enum_symbol_by_value_Alert.Effect'(8) ->
    'UNKNOWN_EFFECT';
'enum_symbol_by_value_Alert.Effect'(9) -> 'STOP_MOVED'.


'enum_value_by_symbol_Alert.Effect'('NO_SERVICE') -> 1;
'enum_value_by_symbol_Alert.Effect'('REDUCED_SERVICE') ->
    2;
'enum_value_by_symbol_Alert.Effect'('SIGNIFICANT_DELAYS') ->
    3;
'enum_value_by_symbol_Alert.Effect'('DETOUR') -> 4;
'enum_value_by_symbol_Alert.Effect'('ADDITIONAL_SERVICE') ->
    5;
'enum_value_by_symbol_Alert.Effect'('MODIFIED_SERVICE') ->
    6;
'enum_value_by_symbol_Alert.Effect'('OTHER_EFFECT') ->
    7;
'enum_value_by_symbol_Alert.Effect'('UNKNOWN_EFFECT') ->
    8;
'enum_value_by_symbol_Alert.Effect'('STOP_MOVED') -> 9.

'enum_symbol_by_value_TripDescriptor.ScheduleRelationship'(0) ->
    'SCHEDULED';
'enum_symbol_by_value_TripDescriptor.ScheduleRelationship'(1) ->
    'ADDED';
'enum_symbol_by_value_TripDescriptor.ScheduleRelationship'(2) ->
    'UNSCHEDULED';
'enum_symbol_by_value_TripDescriptor.ScheduleRelationship'(3) ->
    'CANCELED'.


'enum_value_by_symbol_TripDescriptor.ScheduleRelationship'('SCHEDULED') ->
    0;
'enum_value_by_symbol_TripDescriptor.ScheduleRelationship'('ADDED') ->
    1;
'enum_value_by_symbol_TripDescriptor.ScheduleRelationship'('UNSCHEDULED') ->
    2;
'enum_value_by_symbol_TripDescriptor.ScheduleRelationship'('CANCELED') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> transit_realtime.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "gtfs-realtime.proto".



gpb_version_as_string() ->
    "4.6.0".

gpb_version_as_list() ->
    [4,6,0].
