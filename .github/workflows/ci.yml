name: Elixir and TypeScript CI

on: [push, pull_request]

jobs:
  setup:
    name: ASDF and Elixir dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      # cache the ASDF directory, using the values from .tool-versions
      - name: ASDF cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}
        id: asdf-cache
      # only run `asdf install` if we didn't hit the cache
      - uses: asdf-vm/actions/install@v1
        if: steps.asdf-cache.outputs.cache-hit != 'true'
      - name: Setup ASDF environment
        run: |
          ASDF_DIR=$HOME/.asdf
          echo "ASDF_DIR=$ASDF_DIR" >> $GITHUB_ENV
          echo "ASDF_DATA_DIR=$ASDF_DIR" >> $GITHUB_ENV
          echo "$ASDF_DIR/bin" >> $GITHUB_PATH
          echo "$ASDF_DIR/shims" >> $GITHUB_PATH
          $ASDF_DIR/bin/asdf reshim
      - name: Restore dependencies cache
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install dependencies
        if: steps.deps-cache-outputs-cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

  build_elixir:
    name: Build and test Elixir
    runs-on: ubuntu-latest
    needs: setup
    env:
      DATABASE_PASSWORD: postgres
      DATABASE_USER: postgres
      DATABASE_NAME: skate_test
      DATABASE_HOST: localhost
      GUARDIAN_SECRET_KEY: test_guardian_secret_keys
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{env.DATABASE_PASSWORD}}
          POSTGRES_USER: ${{env.DATABASE_USER}}
          POSTGRES_DB: ${{env.DATABASE_NAME}}
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mosquitto:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883
        volumes:
          - ./mosquitto:/mosquitto/config/
        options: --name mqtt
    steps:
      - uses: actions/checkout@v4
      - name: Restart MQTT to load mosquitto/mosquitto.conf from checkout
        run: docker restart mqtt
      - name: ASDF cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}
        id: asdf-cache
      - name: Setup ASDF environment
        run: |
          ASDF_DIR=$HOME/.asdf
          echo "ASDF_DIR=$ASDF_DIR" >> $GITHUB_ENV
          echo "ASDF_DATA_DIR=$ASDF_DIR" >> $GITHUB_ENV
          echo "$ASDF_DIR/bin" >> $GITHUB_PATH
          echo "$ASDF_DIR/shims" >> $GITHUB_PATH
          $ASDF_DIR/bin/asdf reshim
      - name: Restore dependencies cache
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Compile (warnings as errors)
        run: mix compile --force --warnings-as-errors
      - name: Check formatting
        run: mix format --check-formatted
      - name: Check migration safety
        run: mix excellent_migrations.check_safety
      - name: Credo
        run: mix credo
      - name: Sobelow
        run: mix sobelow
      - name: Run tests
        run: mix test --cover --include 'Test.Integration'
        env:
          POSTGRES_USERNAME: ${{env.DATABASE_USER}}
          POSTGRES_PASSWORD: ${{env.DATABASE_PASSWORD}}
          POSTGRES_HOSTNAME: ${{env.DATABASE_HOST}}
          GUARDIAN_SECRET_KEY: ${{env.GUARDIAN_SECRET_KEY}}
      - uses: mbta/actions/dialyzer@v1

  build_typescript:
    name: Build and test TypeScript
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: ASDF cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}
        id: asdf-cache
      - name: Setup ASDF environment
        run: |
          ASDF_DIR=$HOME/.asdf
          echo "ASDF_DIR=$ASDF_DIR" >> $GITHUB_ENV
          echo "ASDF_DATA_DIR=$ASDF_DIR" >> $GITHUB_ENV
          echo "$ASDF_DIR/bin" >> $GITHUB_PATH
          echo "$ASDF_DIR/shims" >> $GITHUB_PATH
          $ASDF_DIR/bin/asdf reshim
      - name: Restore dependencies cache
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install dependencies
        run: npm --prefix=assets ci 
      - name: Check types / linting / formatting
        run: npm --prefix=assets run check
      - name: Run tests
        run: npm --prefix=assets test -- --detectOpenHandles
